load help;


@[name]
dao.routine
@[name]

@[title]
Routine
@[title]


@[text]

Routine (function) is a relative independent block of code that can be
repeatedly executed by invoking it when and where it is needed.
It can accept parameters to changes its behaviour.
It may also return results to its caller.
In Dao, the term routine and function can be used interchangably.


@[subsection]
Definition
@[subsection]

Dao routines are declared with keyword @[green]routine@[green]
For example,
@[code(dao)]
routine func( first, second )
{
   first += 10;
   second += "test";
   return first, second; # return more than one results.
}

(ret1, ret2) = func( 111, "AAA" );
ret3 = func( ret1, ret2 );
@[code(dao)]
defines a function that can take two parameters as inputs,
and return two values as outputs.



@[subsection]Parameter Type and Default Value@[subsection]

Routine parameters can have type annotations, and a default value can
also be specified for a parameter.
@[code]
routine MyRout( name: string, index = 0 )
{
   io.writeln( "NAME  = ", name )
   io.writeln( "INDEX = ", index )
}
@[code]
Here @[cyan]name@[cyan] is annotated as type string, and @[cyan]index@[cyan]
is specified as an integer with default value 0.
Any parameter after a parameter with default value must have default values as well.
If a routine is called with wrong type of parameters,
or no value is passed to a parameter without a
default value, an exception will be raised and the execution will abort.



@[subsection]Routine Overloading@[subsection]

Routine overloading by parameter types is also supported in Dao,
which means that multiple routines can be defined with the same name,
but different parameter signatures.
@[code]
routine MyRout( index: int, name = "ABC" )
{
   io.writeln( "INDEX = ", index )
   io.writeln( "NAME  = ", name )
}

MyRout( "DAO", 123 ) # invoke the first MyRout()
MyRout( 456, "script" ) # invoke the second MyRout()
@[code]







@[text]





@[name]
dao.routine.closure
@[name]

@[title]
Anonymous Routine and Closure
@[title]


@[text]

Dao supports routines as first class objects.
So they can be created at running time and used just like other objects.
They may be created as anonymous routines or closures,
depending on how they are declared.


The syntax to declare an anonymous routine or closure is nearly identical to
the definition of a normal function, except the following differences:
@[list]
-- No need for a function name;
-- Default parameter values do not need to be constant;
-- Its function body may access the local variables of the outer function;
@[list]


Here is a simple anonymous function,
@[code]
rout = routine( name: string, value = 0 ){
	io.writeln( name, value )
	return name.size() + value
}
rout( "abc", 123 )
@[code]
The only difference of this declaration from normal function declaration is
the lacking of function name here. 


Here is another simple anonymous function that has non-constant default parameter,
@[code]
var max = 100
rout = routine( start: int, offset = rand(max) ){
	return start + offset
}
rout( 123 )
@[code]
When non-constant expression is used as the default parameter,
this expression is evaluated right before the creation of the anonymous routine.
So here, the default value for parameter "offset" is a random integer
generated right before the creation of the anonymous routine.


In the above two examples, the created routines do not access the local
variables of the outer routines. So they are created as ordinary anonymous
routines instead of closures.
Here is another example where a local variable of the outer routine is accessed,
@[code]
routine MakeClosure( start: int )
{
	return routine( offset: int ){
		return start + offset
	}
}
rout = MakeClosure( 100 );
rout( 123 )
@[code]
Due to the access of local variable "start" of "MakeClosure()",
the created routine "rout" will be a closure.
When a closure is created, it will store the accessed outer scope local variables
as up values in the created routine. For primitive type variables, their current
value will be copied to the closure's up values; for other types, only their
references are copied.
Once a closure is created, it can work without the original context where it was created.


The main difference between an anonymous function and a closure
is whether it accesses the local variable of the outer function.
This difference leads to another important difference in what happens
when an expression for running time routine creation is executed.
If the expression should produce a closure, a @[green]new@[green] routine
with captured up values is always created;
but if the expression should produce an ordinary anonymous routine,
the @[green]same@[green] routine might be returned.
For example, the following "MakeRoutine()" function will always return the
same routine object,
@[code]
routine MakeRoutine()
{
	return routine( value: double ){
		return value * value
	}
}
io.writeln( MakeRoutine(), MakeRoutine() )
@[code]
This happens when the anonymous function has no static variables.
If it has, a new routine is always created just like
new routines are always created for closures.
For example, the following "MakeRoutine()" function will always
return a new routine object,
@[code]
routine MakeRoutine()
{
	return routine( value: double ){
		static dummy = 123
		return value * value
	}
}
io.writeln( MakeRoutine(), MakeRoutine() )
@[code]


@[text]








@[name]
dao.routine.section
@[name]

@[title]
Code Section Methods
@[title]


@[text]



Code section/block method is an alternative to functional methods
in other languages such as Python. Dao code section is syntactically
very similar to the code block in Ruby. Unlike Ruby code blocks 
which are compiled as closure and passed as an implicit parameter
(so it's essentially a syntax sugar), Dao code section is really
a code section in its host function, no closure is created a runtime. 
When needed, the method locate the code section in the host function 
and run that section of codes.


To define a code section method, it will be necessary to specify
two set of parameters and return types: one for the normal routine,
and the other for the code section.
@[code]
routine meth_name( meth_params ) [sect_params => sect_return] => meth_return
{
	...
}
@[code]
The parameter list prototype @[cyan]sect_params@[cyan] for the code section specifies
what kind of parameters this method will pass to the code section; and the section
return type @[cyan]sect_return@[cyan] indicates what type of value this method expects
the code section to return.


Code section method can be called in the following way:
@[code]
returned = meth_name( meth_params ) {
	code_block
}
@[code]
If there is no method parameter, it can be simply written as:
@[code]
returned = meth_name {
	code_block
}
@[code]
By default, the code section receives the parameters passed in by the method
through implicitly defined variables named @[green]X@[green] and @[green]Y@[green].
User can choose to use more meaningful names by,
@[code]
returned = meth_name { [index, item]
	code_block
}
@[code]


For example, list type has a code section method for sorting with 
the following prototype,
@[code]
sort( self :list<@T>, k=0 ) [X :@T, Y :@T => int] => list<@T>
@[code]
Here the code section parameters @[cyan]X@[cyan] and @[cyan]Y@[cyan]
are used to pass two items of the list for comparison.
The code section return type @[green]int@[green] indicates that
the code section is expected to return an integer as the comparison result.
So this @[green]sort()@[green] can be use in the following ways,
@[code]
numlist = { 11, 44, 21, 32, 56, 67, 25 }

# Sort all by ascend order:
numlist.sort { X < Y }

# Sort by descend order until the largest 3 items are sorted:
numlist.sort( 3 ) { X > Y }
# Now the first 3 items of the list is the largest 3 items;

tuplist = { ( 2, 'ghi' ), ( 1, 'def' ), ( 2, 'abc' ), ( 1, 'abc' ) }
tuplist.sort {
	# First sort by the first items of the tuples;
	if( X[0] != Y[0] ) return X[0] < Y[0];
	# Then sort by the second items;
	return X[1] < Y[1];
}
@[code]


In a user defined code section method, the @[green]yield@[green] statement
can be used to pass parameters and invoke the execution of the code section
that is attached to the call.
Here is an example for user defined code section method,
@[code]
# A function that can be called with a code section.
# The code section is expected to take an integer as parameter,
# and return a string.
routine Test() [X :int => string] => string
{
	io.writeln( 'In functional method!' );
	s = yield( 123 ); # execute the code section;
	io.writeln( 'Yielded value:', s );
	return s;
}

Test {
	io.writeln( 'In code section:', X );
	return 'abc';
}
@[code]


@[text]



@[name]
dao.routine.decorator
@[name]

@[title]
Function Decorator
@[title]

@[text]


Decorators are a special type of functions that can be used to
enhance the functionalities of other functions by decorating them,
which may either modify these functions or create a modified version
of these functions.


There are different ways to decorate a function, but only functions
that are decorated at their defintion points are modified.
In all other cases, function decoration always produces new and 
modified copies of the original functions.


A decorator is almost identical to a noraml function except that it
must be declared with a name prefixed with @, and the first parameter
must be a routine type, which determines which type of routines can be
decorated by this decorator.
A variable to hold the parameters that will be passed to the function,
must also be declared inside a pair of brackets right after the name of the first parameter.


@[subsection]
Decorator for Any Functions
@[subsection]

If a decorator will be used to decorate any functions,
the routine type for the first parameter of the decorator
can be declared as the most generic function type @[green]routine@[green].


Here is a simple decorator that can decorate any function.
@[code]
routine @Decorator( func(args) : routine )
{
	io.writeln( 'Calling function:', std.about(func) );
	return func( args, ... ); # ... for parameter expanding;
}
@[code]


Decorators can be applied at the places where functions are defined.
@[code]
@Decorator()
routine Function(){ io.writeln( 'Function()' ); }
@[code]


If the decorator does not take any parameter other than
the function to be decorated, the brackets can be omitted:
@[code]
@Decorator
routine Function( a : int ){ io.writeln( 'Function(int)', a ); }

Function();
Function(123);
@[code]



@[subsection]
Decorator for Specific Function Type
@[subsection]

A decorator can be defined such that it can only be applied to 
a specific type of functions, if the type of such functions is
specified as the first parameter of the decorator.


Here is a deocrator that can only be applied to functions that
accepts an integer as parameter and returns a string.
For a decorator for testing such as this one, the expected
output can be passed as additional parameters to the decorator:
@[code]
routine @TestDecorator( func(args) : routine<index:int=>string>, expected = '' )
{
	res = func( args, ... );
	io.writeln( res );
	io.writeln( 'Test result:', res == expected ? 'passed' : 'failed' );
	return res;
}

@TestDecorator( 'Hello' )
routine Hello( index = 0 )
{
	io.writeln( 'Calling Hello(int)' );
	return 'Hello';
}

Hello();
@[code]



@[subsection]
Overloaded Decorator
@[subsection]

Decorators can be overloaded just like the normal functions.


Here is an overloaded deocrator that can only be applied to functions
that accepts a string as parameter and returns an integer.
@[code]
routine @TestDecorator( func(args) : routine<name:string=>int>, expected = 0 )
{
	res = func( args, ... );
	io.writeln( res );
	io.writeln( 'Test result:', res == expected ? 'passed' : 'failed' );
	return res;
}
@[code]



# Decorators can be chained:
@[code]
@Decorator
@TestDecorator( 123 )
routine Hello( name : string )
{
	io.writeln( 'Calling Hello(string)', name );
	return 123;
}

io.writeln( Hello( 'abc' ) );
@[code]



@[subsection]
Decorator in Expression
@[subsection]

Decorator can be used in the same way as normal functions,
namely calling a decorator like a normal function,
and pass the function to be decorated and other values
as parameters to the decorator.
@[code]
anotherHello = @Decorator( Hello )
@[code]
Using decorator in this way will produce a modified copy of the function.


If all the parameters passed to a decorator called in constant form
(namely not used through a varaible), this expression of calling the decorator
is a constant expression and can be evaluated at compiling time.
@[code]
const Hello3 = @Decorator( Hello )
Hello3( 'def' )
@[code]

This feature can be exploited to create modified copies of existing functions
that are imported or loaded from other modules, and use the same function names.
@[code]
load MyModule  # MyFunction is defined in this module;

# Create a modified copy and use the same name:
const MyFunction = @MyDecorator( MyFunction )
@[code]



When a decorator is called in non-constant expression,
the decoration will be done at running time,
@[code]
routine Hello2( index = 123 )
{
	io.writeln( 'Calling Hello2(int)', index );
	return 'Hello';
}
# Running time decoration:
func = @TestDecorator( Hello2, 'Hello' );
io.writeln( '--------' )
func(123)

func = @TestDecorator( func );
io.writeln( '--------' )
func(123)
@[code]


Just like normal functions, decorators can be assigned to variables
and used at running time:
@[code]
deco = @Decorator;
func = deco( func );

io.writeln( '--------' )
func(789);
@[code]



@[subsection]
Decorator for Class Method
@[subsection]

Decorators can be applied to class methods.
Such decorators can be defined outside of the class
as well as inside the class as a class member.


If the routine type of the first parameter of a decorator does not
contain a self parameter, this decorator can be applied to static methods,
@[code]
routine @StaticDecorator( meth(args) :routine<id:int=>int>, value = 123 )
{
	io.writeln( args, value );
	args.id = value;
	return meth( args, ... );
}
@[code]
Otherwise, it can be applied to instance methods,
@[code]
routine @MethodDecorator( meth(args) :routine<self:@T,id:int=>int>, value = 123 )
{
	io.writeln( args, value );
	args.id = value;
	return meth( args, ... );
}
@[code]


When a decorator is defined as a class method,
it must be declared as a static method, 
because its first parameter must be a routine type,
@[code]
class Klass
{
	static routine @ClassDecorator( meth(args) :routine<id:string=>?>, value = 'abc' ){
		io.writeln( args, value );
		args.id = value;
		return meth( args, ... );
	}

	# Decorator can be applied to class methods:
	@StaticDecorator( 456 )
	static routine StaticMeth( id :int ){ io.writeln( id ); return id }

	@ClassDecorator
	static routine StaticMeth( id :string ){ io.writeln( id ) }

	@MethodDecorator( 789 )
	routine Meth( id :int ){ io.writeln( id ); return id }
}

Klass::StaticMeth( 0 );
Klass::StaticMeth( 'a' );

k = Klass();
k.Meth(1);
@[code]



@[text]
