load help;


@[name]
dao.type.array
@[name]

@[title]
Numeric Array Type
@[title]

@[text]
Multi-dimentional numeric array is supported by Dao as @[green]array@[green] type.


@[subsection]Definition@[subsection]
@[code(syntax)]
# Elements Enumeration:
VectorEnumeration  ::= '[' ExpressionList ']'
MatrixEnumeration  ::= '[' ExpressionList { ';' ExpressionList } ']'
VectorEnumeration2 ::= 'array' '{' ExpressionList '}'
MatrixEnumeration2 ::= 'array' '{' ExpressionList { ';' ExpressionList } '}'

# Elements of Arithmetic Progression sequence: count ~ start [ ~ step ]
ArrayByArithProg  ::= '[' Expression ':' [ Expression ':' ] Expression ']'
ArrayByArithProg2 ::= 'array' '{' Expression ':' [ Expression ':' ] Expression '}'

Array ::= VectorEnumeration | MatrixEnumeration | ArrayByArithProg
          | VectorEnumeration2 | MatrixEnumeration2 | ArrayByArithProg2
@[code(syntax)]
Please note that @[green]VectorEnumeration@[green] or @[green]VectorEnumeration2@[green]
can still create a matrix or a multi-dimensional array, 
if the @[green]ExpressionList@[green] produces a list of arrays.


Four numeric types are supported by the @[green]array@[green] type:
@[green]int@[green], @[green]float@[green], @[green]double@[green]
and @[green]complex@[green]. When an array is created by enumeration without 
explicit type declaration, its numeric type is inferred from the first expression 
of the expression list, if the enumeration is not empty; otherwise, 
@[green]float@[green] will be used as the numeric type.


Dao supports a number of built-in operations for array. For arithmetic operations, 
they are always supported element-wise operations. 


@[subsection]Examples@[subsection]
@[code]
vec1 = [1, 2, 3]            # array<int> vector, or 1x3 matrix;
vec2 = [1F; 2; 3]           # array<float> 3x1 matrix, or transposed vector;
mat1 = [1.0, 2; 3, 4]       # array<double> 2x2 matrix;
mat2 = [ [1, 2], [3, 4] ]   # 2x2 matrix
mat3 = array{ 1, 2; 3, 4 }  # 2x2 matrix
mat4 = array<int>(5){ [1, 2, 3] }  # 5x3 matrix;
@[code]

@[text]


@[name]
dao.type.array.method
@[name]

@[title]
Array methods
@[title]

@[text]

Currently Dao array type supports the following methods:
@[code]
array<@T<none|int|float|double|complex>=none>( dim1: int, dim2 = 0, dim3 = 0 )
	[I: int, J: int, K: int => @T|array<@T>] => array<@T>
dim( invar self: array<@T>, i: int ) => int
dims( invar self: array<@T> ) => tuple<...:int>
index( invar self: array<@T>, i: int ) => tuple<...:int>
size( invar self: array<@T> ) => int
resize( self: array<@T>, size: int, ...: int ) => array<@T>
reshape( self: array<@T>, size: int, ...: int ) => array<@T>
permute( self: array<@T>, size: int, ...: int ) => array<@T>
transpose( self: array<@T> )
max( invar self: array<@T<int|float|double>> ) => tuple<@T,int>|none
min( invar self: array<@T<int|float|double>> ) => tuple<@T,int>|none
sum( invar self: array<@T> ) => @T
sort( self: array<@T>, order: enum<ascend,descend> = $ascend, part = 0 )
	=> array<@T>
map( invar self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int => @V] => array<@V>
reduce( invar self: array<@T> )
	[item: @T, res: @T, I: int, J: int, K: int, L: int, M: int => @T] => @T
reduce( invar self: array<@T>, init: @V )
	[item: @T, res: @V, I: int, J: int, K: int, L: int, M: int => @V] => @V
collect( invar self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int => none|@V] => list<@V>
iterate( invar self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int]
apply( self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int => @T] => array<@T>
@[code]


@[subsection]
Methods
@[subsection]

@[subsubsection]
dim(invar self:array<@T>,i:int)=>int
@[subsubsection]
@[code]
dim( invar self: array<@T>, i: int ) => int
@[code]
Get the i-th dimension.

@[subsubsection]
dims(invar self:array<@T>)=>tuple<...:int>
@[subsubsection]
@[code]
dims( invar self: array<@T> ) => tuple<...:int>
@[code]
Get all the dimensions.

@[subsubsection]
index(invar self:array<@T>,i:int)=>tuple<...:int>
@[subsubsection]
@[code]
index( invar self: array<@T>, i: int ) => tuple<...:int>
@[code]
Convert an one-dimensional index to a multi-dimensional index.

@[subsubsection]
size(invar self:array<@T>)=>int
@[subsubsection]
@[code]
size( invar self: array<@T> ) => int
@[code]
Get the total number of elements in the array.

@[subsubsection]
resize(self:array<@T>,size:int,...:int)
@[subsubsection]
@[code]
resize( self: array<@T>, size: int, ...: int )
@[code]
Resize the array. The size in each dimension is specified in the parameters.

@[subsubsection]
reshape(self:array<@T>,size:int, ...:int)
@[subsubsection]
@[code]
reshape( self: array<@T>, size: int, ...: int )
@[code]
Reshape the array. The size in each dimension is specified in the parameters.

@[subsubsection]
permute(self:array<@T>,size:int,...:int)
@[subsubsection]
@[code]
permute( self: array<@T>, size: int, ...: int )
@[code]
Permute the elements of the array such that an element located by its original index
in the original array is moved to the location as specified by its permuted index
in the permuted array.

@[subsubsection]
transpose(self:array<@T>)
@[subsubsection]
@[code]
transpose( self: array<@T> )
@[code]
Transpose a matrix.

@[subsubsection]
max(invar self:array<@T<int|float|double>>)=>tuple<@T,int>|none
@[subsubsection]
@[code]
max( invar self: array<@T<int|float|double>> ) => tuple<@T,int>|none
@[code]
Get the maximum element in the array.

@[subsubsection]
min(invar self:array<@T<int|float|double>>)=>tuple<@T,int>|none
@[subsubsection]
@[code]
min( invar self: array<@T<int|float|double>> ) => tuple<@T,int>|none
@[code]
Get the minimum element in the array.

@[subsubsection]
sum(invar self:array<@T>)=>@T
@[subsubsection]
@[code]
sum( invar self: array<@T> ) => @T
@[code]
Get the sum of the elements in the array.

@[subsubsection]
sort(self:array<@T>,order:enum<ascend,descend>=$ascend,part=0)=>array<@T>
@[subsubsection]
@[code]
sort( self: array<@T>, order: enum<ascend,descend> = $ascend, part = 0 )
	=> array<@T>
@[code]
Sort the elements in the array in ascend or descend order.
If @[code]part@[code] is not zero, the array is partially sorted such that
the first @[code]part@[code] elements in the sorted array are
the @[code]part@[code] maximum or minimum elements in right order.

@[subsubsection]
map(invar self:array<@T>)[item:@T,I:int,J:int,K:int,...=>@V]=>array<@V>
@[subsubsection]
@[code]
map( invar self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int => @V] => array<@V>
@[code]
Map the array to a new array such that each element in the original array
is mapped to a new value in the new array according to the code section evaluation.
The value of the elements can be passed to the code section as the first parameter
of the code section, and the multi-dimensional index can be passed as the remaining parameters.

@[subsubsection]
reduce(invar self:array<@T>)[item:@T,res:@T,I:int,J:int,K:int,...=>@T]=>@T
@[subsubsection]
@[code]
reduce( invar self: array<@T> )
	[item: @T, res: @T, I: int, J: int, K: int, L: int, M: int => @T] => @T
@[code]
Reduce/fold the elements in the array according to the evaluation result of the code
section.
The first element will be used as the initial result, and be passed to the code
section as the second paramter. The returned value of the code section will become
the new result.

@[subsubsection]
reduce(invar self:array<@T>,init:@V)[item:@T,res:@V,I:int,J:int,...=>@V]=>@V
@[subsubsection]
@[code]
reduce( invar self: array<@T>, init: @V )
	[item: @T, res: @V, I: int, J: int, K: int, L: int, M: int => @V] => @V
@[code]
Reduce/fold the elements in the array according the evaluation result of the code
section.
It is the same as the previous method, except that the initial result is specified
as an additional parameter to the method.

@[subsubsection]
collect(invar self:array<@T>)[item:@T,I:int,J:int,...=>none|@V]=>list<@V>
@[subsubsection]
@[code]
collect( invar self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int => none|@V] => list<@V>
@[code]
Iterate over the array, and execute the code section for each element,
then collect the non @[code]none@[code] values to produce and return a list.

@[subsubsection]
iterate(invar self:array<@T>)[item:@T,I:int,J:int,K:int,...]
@[subsubsection]
@[code]
iterate( invar self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int]
@[code]
Iterate over the array, and execute the code section for each element.

@[subsubsection]
apply(self:array<@T>)[item:@T,I:int,J:int,K:int,...=>@T]=>array<@T>
@[subsubsection]
@[code]
apply( self: array<@T> )
	[item: @T, I: int, J: int, K: int, L: int, M: int => @T] => array<@T>
@[code]
Iterate over the array, and execute the code section for each element.
And substitute the elements with the values returned by the code section.



@[text]


