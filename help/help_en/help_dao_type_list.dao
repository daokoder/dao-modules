load help;

@[name]
dao.type.list
@[name]

@[title]
List Container Type
@[title]

@[text]
In Dao, @[green]list@[green] is supported as a generic container type
which can contain any data type. Internally it is implemented as a dynamic array.


@[subsection]Definition@[subsection]
@[code(syntax)]
ListEnumeration ::= [ 'list' ] '{' ExpressionList '}'

# Items of Arithmetic Progression sequence: count ~ start [ ~ step ]
ListByArithProg ::= [ 'list' ] '{' Expression ':' [ Expression ':' ] Expression '}'

List ::= ListEnumeration | ListByArithProg
@[code(syntax)]
When a list is created by enumeration without explicit type declaration, 
its type is inferred from the first expression of the expression list, 
if the enumeration is not empty; otherwise, @[green]list<any>@[green] 
will be used as its type.


@[subsection]Examples@[subsection]
@[code]
list1 = { 1, 2, 3 }    # list<int>
list2 = { 1.0, 2, 3 }  # list<float>
list3 = { 1 : 5 }      # list<int>
list4 = list{ 1 : 2 : 5 }  # list<int>
@[code]

@[text]



@[name]
dao.type.list.method
@[name]

@[title]
List Methods
@[title]


@[text]
@[code]
list<@T=any>( count: int )[index: int => @T] => list<@T>
list<@T=any>( count: int, init: @T )[index: int, prev: @T => @T] => list<@T>

clear( self: list<@T> )
size( invar self: list<@T> )=>int
resize( self: list<@T<int|float|double|complex|string|enum>>, size: int )
resize( self: list<@T>, value: @T, size: int )

max( invar self: list<@T<int|float|double|complex|string|enum>> ) => tuple<@T,int>
min( invar self: list<@T<int|float|double|complex|string|enum>> ) => tuple<@T,int>
sum( invar self: list<@T<int|float|double|complex|string|enum>> ) => @T

insert( self: list<@T>, item: @T, pos = 0 ) => list<@T>
erase( self: list<@T>, start = 0, count = 1 ) => list<@T>
join( self: list<@T>, other: list<@T>, ... : list<@T> ) => list<@T>
append( self: list<@T>, item: @T, ... : @T ) => list<@T>
push( self: list<@T>, item: @T, to: enum<front, back> = $back ) => list<@T>
pop( self: list<@T>, from: enum<front,back> = $back ) => @T
front( invar self: list<@T> ) => @T
back( invar self: list<@T> ) => @T

collect( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: @T, index: int => none|@V] => list<@V>
collect( invar self: list<@T>, invar other: list<@S>, 
	direction: enum<forward,backward> = $forward )
	[item: @T, item2: @S, index: int => none|@V] => list<@V>
associate( invar self: list<@T>, hashing = 0 )
	[item: invar<@T>, index: int => none|tuple<@K,@V>] => map<@K,@V>
associate( invar self: list<@T>, invar other: list<@S>, hashing = 0 )
	[item: invar<@T>, item2: invar<@S>, index: int => none|tuple<@K,@V>]
	=> map<@K,@V>
reduce( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: invar<@T>, value: @T, index: int => @T] => @T|none
reduce( invar self: list<@T>, init: @V,
	direction: enum<forward,backward> = $forward )
	[item: invar<@T>, value: @V, index: int => @V] => @V
find( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: invar<@T>, index: int => int] => tuple<index:int,value:@T> | none
iterate( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: invar<@T>, index: int]
iterate( self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: @T, index: int]

sort( self: list<@T>, order: enum<ascend,descend> = $ascend, part = 0 ) => list<@T>
sort( self: list<@T>, part = 0 )[X: @T, Y: @T => int] => list<@T>
apply( self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: @T, index: int => @T] => list<@T>
@[code]



@[subsection]
Methods
@[subsection]


@[subsubsection]
list<@T=any>(count:int)[index:int=>@T]=>list<@T>
@[subsubsection]
@[code]
list<@T=any>( count: int )[index: int => @T] => list<@T>
@[code]


@[subsubsection]
list<@T=any>(count:int,init:@T)[index:int,prev:@T=>@T]=>list<@T>
@[subsubsection]
@[code]
list<@T=any>( count: int, init: @T )[index: int, prev: @T => @T] => list<@T>
@[code]


@[subsubsection]
clear(self:list<@T>)
@[subsubsection]
@[code]
clear( self: list<@T> )
@[code]
Clear the list.


@[subsubsection]
size(invar self:list<@T>)=>int
@[subsubsection]
@[code]
size( invar self: list<@T> )=>int
@[code]
Return the size of the list.


@[subsubsection]
resize(self:list<@T<int|float|double|complex|string|enum>>,size:int)
@[subsubsection]
@[code]
resize( self: list<@T<int|float|double|complex|string|enum>>, size: int )
@[code]
Resize the list of primitive data to size "size".


@[subsubsection]
resize(self:list<@T>,value:@T,size:int)
@[subsubsection]
@[code]
resize( self: list<@T>, value: @T, size: int )
@[code]
Resize the list to size "size", and fill the new items with value "value".


@[subsubsection]
max(invar self:list<@T<int|float|double|complex|string|enum>>)=>tuple<@T,int>
@[subsubsection]
@[code]
max( invar self: list<@T<int|float|double|complex|string|enum>> ) => tuple<@T,int>
@[code]
Return the maximum value of the list and its index.
The list has to contain primitive data.
In case of complex values, complex numbers are compared by the real part
first, and then by the imaginary part.


@[subsubsection]
min(invar self:list<@T<int|float|double|complex|string|enum>>)=>tuple<@T,int>
@[subsubsection]
@[code]
min( invar self: list<@T<int|float|double|complex|string|enum>> ) => tuple<@T,int>
@[code]
Return the minimum value of the list and its index.


@[subsubsection]
sum(invar self:list<@T<int|float|double|complex|string|enum>>)=>@T
@[subsubsection]
@[code]
sum( invar self: list<@T<int|float|double|complex|string|enum>> ) => @T
@[code]
Return the sum of the list.


@[subsubsection]
insert(self:list<@T>,item:@T,pos=0)=>list<@T>
@[subsubsection]
@[code]
insert( self: list<@T>, item: @T, pos = 0 ) => list<@T>
@[code]
Insert item "item" as position "pos".
Return the self list;


@[subsubsection]
erase(self:list<@T>,start=0,count=1)=>list<@T>
@[subsubsection]
@[code]
erase( self: list<@T>, start = 0, count = 1 ) => list<@T>
@[code]
Erase from the list "count" items starting from "start".
Return the self list;


@[subsubsection]
join(self:list<@T>,other:list<@T>,...:list<@T>)=>list<@T>
@[subsubsection]
@[code]
join( self: list<@T>, other: list<@T>, ... : list<@T> ) => list<@T>
@[code]
Join none or more lists at the end of the list.
Return the self list;


@[subsubsection]
append(self:list<@T>,item:@T,...:@T)=>list<@T>
@[subsubsection]
@[code]
append( self: list<@T>, item: @T, ... : @T ) => list<@T>
@[code]
Append item(s) at the end of the list.
Return the self list;


@[subsubsection]
push(self:list<@T>,item:@T,to:enum<front,back>=$back)=>list<@T>
@[subsubsection]
@[code]
push( self: list<@T>, item: @T, to: enum<front, back> = $back ) => list<@T>
@[code]
Push an item to the list, either at the front or at the back.
Return the self list;


@[subsubsection]
pop(self:list<@T>,from:enum<front,back>=$back)=>@T
@[subsubsection]
@[code]
pop( self: list<@T>, from: enum<front,back> = $back ) => @T
@[code]
Pop off an item from the list, either from the front or from the end.
Return the popped item.


@[subsubsection]
front(invar self:list<@T>)=>@T
@[subsubsection]
@[code]
front( invar self: list<@T> ) => @T
@[code]
Get the front item of the list.


@[subsubsection]
back(invar self:list<@T>)=>@T
@[subsubsection]
@[code]
back( invar self: list<@T> ) => @T
@[code]
Get the back item of the list.


@[subsubsection]
collect(invar self:list<@T>,direction:enum...)[...=>none|@V]=>list<@V>
@[subsubsection]
@[code]
collect( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: @T, index: int => none|@V] => list<@V>
@[code]
Iterate over the list and evaluate the code section on each item.
The non-@[code]none@[code] values returned by the code section
are collected to create a new list which is then returned.

The iteration direction can be controlled by the "direction" parameter.

Note: invar<@T> will not match to none|@V;


@[subsubsection]
collect(invar self:list<@T>,invar other:list<@S>,...)[...=>none|@V]=>list<@V>
@[subsubsection]
@[code]
collect( invar self: list<@T>, invar other: list<@S>, 
	direction: enum<forward,backward> = $forward )
	[item: @T, item2: @S, index: int => none|@V] => list<@V>
@[code]
Iterate over both lists simutaneously and evaluate the code section
on each pair of their corresponding items.
The non-@[code]none@[code] values returned by the code section
are collected to create a new list which is then returned.

The iteration direction can be controlled by the "direction" parameter.


@[subsubsection]
associate(invar self:list<@T>,hashing=0)[...=>none|tuple<@K,@V>]=>map<@K,@V>
@[subsubsection]
@[code]
associate( invar self: list<@T>, hashing = 0 )
	[item: invar<@T>, index: int => none|tuple<@K,@V>] => map<@K,@V>
@[code]
Iterate over this list and evaluate the code section on the item
value(s) and index. The code section may return none value, or a
pair of key and value as a tuple. These keys and values from the
code section will produce a map/hash (associative array) which will
be returned by the method.

The last optional parameter "hashing" may take the following values:

-- Zero: indicating the resulting map will be ordered by keys;

-- One : indicating the resulting map will be a hash map with the
         default hashing seed;

-- Two : indicating the resulting map will be a hash map with a
         random hashing seed;

-- Else: indicating the resulting map will be a hash map with this
         "hashing" value as the hashing seed;


@[subsubsection]
associate(invar self:list<@T>,invar other:list<@S>,hashing=0)[...]=>map<@K,@V>
@[subsubsection]
@[code]
associate( invar self: list<@T>, invar other: list<@S>, hashing = 0 )
	[item: invar<@T>, item2: invar<@S>, index: int => none|tuple<@K,@V>]
	=> map<@K,@V>
@[code]
The same as above method except this method iterate over two lists.


@[subsubsection]
reduce(invar self:list<@T>,direction:enum...)[...=>@T]=>@T|none
@[subsubsection]
@[code]
reduce( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: invar<@T>, value: @T, index: int => @T] => @T|none
@[code]
Reduce (fold) the items of the list.

The process is the following:

1. The first item is taken as the initial and current value;

2. Starting from the second item, each item and the current value are
   passed to the code section to evaluate for a new current value;

3. Each new current value will be passed along with the next item
   to do the same code section evaluation to update the value.

4. When all items are processed, the current value will be returned.

The direction of iteration can be controlled by the "direction" paramter.
If the list is empty, "none" will be returned.


@[subsubsection]
reduce(invar self:list<@T>,init:@V,direction:enum...)[...=>@V]=>@V
@[subsubsection]
@[code]
reduce( invar self: list<@T>, init: @V, direction: enum<forward,backward>
	= $forward ) [item: invar<@T>, value: @V, index: int => @V] => @V
@[code]
Reduce (fold) the items of the list.

The process is essentially the same as the above "reduce()" method,
except that:

1. The initial value is passed in as parameter, so the iteration will
   start from the first item;

2. The value produced by the code section does not have to be the same
   as the items of the list;

3. When the list is empty, the "init" value will be returned.


@[subsubsection]
find(invar self:list<@T>,direction:...)[...]=>tuple<index:int,value:@T>|none
@[subsubsection]
@[code]
find( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: invar<@T>, index: int => int] => tuple<index:int,value:@T> | none
@[code]
Find the first item in the list that meets the condition as expressed
by the code section. A non-zero value of the code section indicates
the condition is met.
The direction of iteration can be controlled by the "direction" paramter.


@[subsubsection]
iterate(invar self:list<@T>,direction:enum...)[item:invar<@T>,index:int]
@[subsubsection]
@[code]
iterate( invar self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: invar<@T>, index: int]
@[code]
Iterate on the list. The direction of iteration can be controlled by
the "direction" paramter.


@[subsubsection]
iterate(self:list<@T>,direction:enum...)[item:@T,index:int]
@[subsubsection]
@[code]
iterate( self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: @T, index: int]
@[code]
Iterate on the list. The direction of iteration can be controlled by
the "direction" paramter.
The only difference from the above "iterate()" method is that this
method cannot take constant list as the self parameter.


@[subsubsection]
sort(self:list<@T>,order:enum<ascend,descend>=$ascend,part=0)=>list<@T>
@[subsubsection]
@[code]
sort( self: list<@T>, order: enum<ascend,descend> = $ascend, part = 0 )
	=> list<@T>
@[code]
Sort the list by asceding or descending order. And stops when the
largest "part" items (for descending sorting) or the smallest "part
items (for asceding sorting) have been correctly sorted, which also
means the first "part" items in the (partially) sorted list are in
the right positions. Zero "part" means sorting all items.


@[subsubsection]
sort(self:list<@T>,part=0)[X:@T,Y:@T=>int]=>list<@T>
@[subsubsection]
@[code]
sort( self: list<@T>, part = 0 )[X: @T, Y: @T => int] => list<@T>
@[code]
Sort the list by ordering as defined by the code section.
During the sorting, two items "X" and "Y" will be passed to the code
section for comparison, a non-zero value produced by the code section
indicates "X" is less/smaller than "Y".
The "part" parameter has the same meaning as in the above "sort()" method.


@[subsubsection]
apply(self:list<@T>,direction:enum...)[item:@T,index:int=>@T]=>list<@T>
@[subsubsection]
@[code]
apply( self: list<@T>, direction: enum<forward,backward> = $forward )
	[item: @T, index: int => @T] => list<@T>
@[code]
Apply new values to the items of the list. Each item and its index are
passed to the code section, and values produced by the code section are
used to replace the items of the list.
The direction of iteration can be controlled by the "direction" paramter.

@[text]
