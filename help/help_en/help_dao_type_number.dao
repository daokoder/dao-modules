load help;

@[name]
dao.type.bool
@[name]

@[title]
Boolean Type
@[title]

@[text]

Boolean (@[code]bool@[code]) is a simple logical data type representing true and false.
True and false values are represented by reserved constants @[code]true@[code]
and @[code]false@[code] respectively.
Comparison and logical operations are evaluated to boolean values.
@[code]
B1 = true
B2 = false
B3 = 3 > 2
B4 = B1 and B2
@[code]

@[text]


################################################################################
################################################################################
#### Integer Type
################################################################################
################################################################################
@[name]
dao.type.int
@[name]

@[title]
Integer Type
@[title]

@[text]

@[green]int@[green] is the built-in primitive data type for integers.
By default, its size is the same as the pointer size on the platform,
namely 4 bytes on 32 bits machines and 8 bytes on 64 bits machine.


@[subsection]Definition@[subsection]
@[code(syntax)]
DecDigit ::= '0' ... '9'
HexDigit ::= DecDigit | 'a' ... 'f' | 'A' ... 'F'

DecInteger ::= DecDigit +
HexInteger ::= ('0x' | '0X') HexDigit +
Integer    ::= DecInteger | HexInteger
@[code(syntax)]

@[subsection]Examples@[subsection]
@[code]
A = 123
B = 0x123a
C: int = 789
@[code]
@[text]


################################################################################
################################################################################
#### Single Precision Floating Point Number Type
################################################################################
################################################################################
@[name]
dao.type.float
@[name]

@[title]
Float Type
@[title]

@[text]

@[green]float@[green] is the built-in primitive data type for double precision
floating point numbers.


@[subsection]Definition@[subsection]
@[code(syntax)]
DotDec ::= DecDigit * '.' DecDigit +
DecDot ::= DecDigit + '.' DecDigit *
DecNumber ::= DotDec | DecDot
DecNumber ::= DecInteger | DecNumber
SciNumber ::= DecNumber ( 'e' | 'E' ) [ '+' | '-' ] DecInteger

Float  ::= DecNumber | SciNumber
@[code(syntax)]
where @[green]DecInteger@[green] is defined @[node]dao.type.int@[node].


@[subsection]Examples@[subsection]
@[code]
A = .12
B = 12.
C = 12.5
D = 2e-3
E = 2E-3
@[code]
@[text]



################################################################################
################################################################################
#### Complex Number Type
################################################################################
################################################################################
@[name]
dao.type.complex
@[name]

@[title]
Complex Type
@[title]

@[text]

@[green]complex@[green] is the built-in primitive data type for complex numbers.
Both the real and imaginary part of a complex number are stored as double
precision floating point numbers.


@[subsection]Definition@[subsection]
@[code(syntax)]
Complex ::= ( DecInteger | DecNumber | SciNumber ) 'C'
@[code(syntax)]

@[green]complex@[green] has two fields @[green]real@[green] and @[green]imag@[green],
which can be used to set and get the real and imaginary part of the complex.


@[subsection]Examples@[subsection]
@[code]
A = 1C
B = 123C
C = 12.3C
R = C.real;
I = C.imag;
@[code]
@[text]

