load help;

@[name]
dao.type.string
@[name]

@[title]
String Type
@[title]

@[text]

@[green]string@[green] is a primitive data type that represents a sequence of bytes.
Dao strings are @[green]not@[green] null-terminated, so they are effectively byte 
arrays that can be used to store any sequences of bytes.
But when processed as text, it is usually assumed to be encoded in UTF-8.


@[subsection]Basic Definition@[subsection]

Strings can be expressed as string literals quoted with double or single
quotation marks.
@[code(syntax)]
SingleQuoteString ::= ' ' ' ValidCharSequence ' ' '
DoubleQuoteString ::= ' " ' ValidCharSequence ' " '
@[code(syntax)]
where @[green]ValidCharSequence@[green] can be anything but the quotation marks
without backslash escapes. Any character in a string can be preceded with
a escape backslash to specify a charater represented by:
@[list]
-- Single decimal digit: @[green]\d@[green];
-- Octal value with upto 3 digits: @[green]\ooo@[green];
-- Hexidecial value with upto 2 digits prefixed by @[green]x@[green]:
   @[green]\xhh@[green];
-- Hexidecial value with upto 4 digits prefixed by @[green]u@[green]:
   @[green]\uhhhh@[green];
-- Hexidecial value with upto 8 digits prefixed by @[green]U@[green]:
   @[green]\Uhhhhhhhh@[green];
@[list]
Here, these numbers will be interpreted as ASCII codes or UTF-8 codepoints.
With backslash escapes, a tab can also be represtend by @[green]\t@[green],
and a line break by @[green]\n@[green] and a carriage return by @[green]\r@[green].
Any other character escaped by a backslash literally represents that character itself.




@[subsection]Verbatim String@[subsection]

A verbatim string is a string that can contain anything
without interpreting escape characters.
@[code(syntax)]
VerbatimString ::= '@[' [Delimiter] ']' Characters '@[' [Delimiter] ']'
@[code(syntax)]
Where @[cyan]Delimiter@[cyan] can contain letters, digits, underscores, 
blank spaces, dots, colons, dashes and assignment marks.
It must be unique such that @[green]'@[' [Delimiter] ']'@[green]
does not appear in the string content.


@[subsection]Examples@[subsection]

@[code]
mbs = 'hello'
wcs = "道语言"
mbs2 = 'It\'s green'
wcs2 = "\u9053\u8bed\u8a00" # the same as wcs;

# verbatim strings:
mbs = @[] some text @[]

# C++ codes in verbatim string:
cpp =
@[cpp x]
class AA
{
	int index;
};
struct BB{};
@[cpp x]


# Lua codes in verbatim string:
lua =
@[lua]
local a = 1;
function Test()
	io.write( 'Hello' )
end
@[lua]

# HTML codes in verbatim string:
html =
@[html:123456]
<body>
<span name="test"></span>
</body>
@[html:123456]
@[code]

@[text]


################################################################################
################################################################################
########
######## String methods
########
################################################################################
################################################################################

@[name]
dao.type.string.method
@[name]

@[title]
Dao string methods
@[title]

@[text]

Here is the full list of string methods:
@[code]
string( count: int, char = 0 ) => string
string( count: int )[index: int => string] => string
size( invar self: string, utf8 = false ) => int
insert( invar self: string, str: string, pos = 0 ) => string
erase( invar self: string, pos = 0, count = -1 ) => string
chop( invar self: string, utf8 = 0 ) => string
trim( invar self: string, where: enum<head;tail> = $head+$tail, utf8 = 0 ) => string
find( invar self: string, str: string, from = 0, reverse = 0 ) => int
convert( invar self: string, to: enum<local,utf8,lower,upper> ) => string
replace( invar self: string, str1: string, str2: string, index = 0 ) => string
expand( invar self: string, invar subs: map<string,string>|tuple<...:string>,
		spec = "$", keep = 1 ) => string
split( invar self: string, sep = "" ) => list<string>
iterate( invar self: string, unit: enum<byte,char> = $byte )[char: int, index: int]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> string
match( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> tuple<start:int,end:int>|none
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = -1 ) => string
capture( invar self: string, pattern: string, start = 0, end = -1 ) => list<string>
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
scan( invar self: string, pattern: string, start = 0, end = -1 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>

offset( invar self: string, charIndex: int ) => int
char( invar self: string, charIndex: int ) => string
@[code]


@[subsection]
Initialization Methods
@[subsection]

In addition to creating string by using string literals,
the following to initialization methods are provided for
convenient and flexible construction of strings.
@[code]
string( count: int, char = 0 ) => string
string( count: int )[index: int => string] => string
@[code]


@[subsubsection]
string(count:int,char=0)=>string
@[subsubsection]
@[code]
string( count: int, char = 0 ) => string
@[code]
Create and return a string that is composed of "count" of "char".


Examples,
@[code]
S1 = string( 5, 'S'[0] )   # SSSSS
S2 = string( 3, 0x9053 )   # 道道道
@[code]


@[subsubsection]
string(count:int)[index:int=>string]=>string
@[subsubsection]
@[code]
string( count: int )[index: int => string] => string
@[code]
Create and return a string that is concatenation of the resulting
strings from the exection of the code section.


Examples,
@[code]
S1 = string( 5 ){ "S" }       # SSSSS
S2 = string( 2 ){ "道语言" }  # 道语言道语言
S3 = string( 6 ){ [index] (string) index }  # 012345
@[code]


@[subsection]
Methods
@[subsection]

The following string methods are provided for convenient manipulation of strings.
@[code]
size( invar self: string, utf8 = false ) => int
insert( invar self: string, str: string, pos = 0 ) => string
erase( invar self: string, pos = 0, count = -1 ) => string
chop( invar self: string, utf8 = 0 ) => string
trim( invar self: string, where: enum<head;tail> = $head+$tail, utf8 = 0 ) => string
find( invar self: string, str: string, from = 0, reverse = 0 ) => int
convert( invar self: string, to: enum<local,utf8,lower,upper> ) => string
replace( invar self: string, str1: string, str2: string, index = 0 ) => string
expand( invar self: string, invar subs: map<string,string>|tuple<...:string>,
		spec = "$", keep = 1 ) => string
split( invar self: string, sep = "" ) => list<string>
iterate( invar self: string, unit: enum<byte,char> = $byte )[char: int, index: int]
offset( invar self: string, charIndex: int ) => int
char( invar self: string, charIndex: int ) => string
@[code]


@[subsubsection]
size(invar self:string,utf8=false)=>int
@[subsubsection]
@[code]
size( invar self: string, utf8 = false ) => int
@[code]
Return the number of bytes or characters in the string.


Examples,
@[code]
S = "ABCDE"
len1 = S.size()
len2 = "XYZ".size()
@[code]

For efficiency, you might consider to use the size operator @[code]%@[code],
@[code]%S@[code] gives the length of the string.


@[subsubsection]
insert(invar self:string,str:string,pos=0)=>string
@[subsubsection]
@[code]
insert( invar self: string, str: string, pos = 0 ) => string
@[code]
Insert "str" at "pos";

Return a new string;


@[subsubsection]
erase(invar self:string,pos=0,count=-1)=>string
@[subsubsection]
@[code]
erase( invar self: string, pos = 0, count = -1 ) => string
@[code]
Erase "count" bytes starting from "pos";

Return a new string;


@[subsubsection]
chop(invar self:string,utf8=0)=>string
@[subsubsection]
@[code]
chop( invar self: string, utf8 = 0 ) => string
@[code]
Chop EOF, '\n' and/or '\r' off the end of the string;

-- EOF  is first checked and removed if found;

-- '\n' is then checked and removed if found;

-- '\r' is last checked and removed if found;

If "utf8" is not zero, all bytes that do not constitute a
valid UTF-8 encoding sequence are removed from the end.


Examples,
@[code]
S1 = "line\n"
S2 = S1.chop()

S3 = "道语言"[:7]
S4 = S3.chop( 1 )  # 道语
@[code]


@[subsubsection]
trim(invarself:string,where:enum<head;tail>=$head+$tail,utf8=0)=>string
@[subsubsection]
@[code]
trim( invar self: string, where: enum<head;tail> = $head+$tail, utf8 = 0 ) => string
@[code]
Trim whitespaces from the head and/or the tail of the string;

If "utf8" is not zero, all bytes that do not constitute a
valid UTF-8 encoding sequence are trimmed as well.


Examples,
@[code]
S1 = "\tline\n"
S2 = S1.trim()         # "line"
S3 = S1.trim( $head )  # "line\n"

S4 = "\t道语言"[:7]
S5 = S4.trim()            # "道语??"
S6 = S4.trim( $tail, 1 )  # "\t道语"
@[code]


@[subsubsection]
find(invar self:string,str:string,from=0,reverse=0)=>int
@[subsubsection]
@[code]
find( invar self: string, str: string, from = 0, reverse = 0 ) => int
@[code]
Find the first occurrence of "str" in this string, searching from "from";

If "reverse" is zero, search forward, otherwise backward;

Return -1, if "str" is not found; Otherwise,

Return the index of the first byte of the found substring for forward searching;

Return the index of the last byte of the found substring for backward searching;


Examples,
@[code]
S1 = "dao programming language and dao virtual machine"
P1 = S1.find( "dao" )         # Find the first "dao";
P2 = S2.find( "dao", -1, 1 )  # Find the last "dao";
@[code]


@[subsubsection]
convert(invar self:string,to:enum<local,utf8,lower,upper>)=>string
@[subsubsection]
@[code]
convert( invar self: string, to: enum<local,utf8,lower,upper> ) => string
@[code]
Convert the string:

-- To local encoding if the string is encoded in UTF-8;

-- To UTF-8 encoding if the string is not encoded in UTF-8;

-- To lower cases;

-- To upper cases;


Examples,
@[code]
S1 = "Dao Language"
S2 = S1.convert( $upper )  # DAO LANGUAGE
S3 = S1.convert( $lower )  # dao language
@[code]


@[subsubsection]
replace(invar self:string,str1:string,str2:string,index=0)=>string
@[subsubsection]
@[code]
replace( invar self: string, str1: string, str2: string, index = 0 ) => string
@[code]
Replace the substring "str1" in "self" to "str2";

Replace all occurrences of "str1" to "str2" if "index" is zero;

Otherwise, replace only the "index"-th occurrence;

Positive "index" is counted forwardly;

Negative "index" is counted backwardly;


Examples,
@[code]
S1 = "dao programming language and dao virtual machine"
S2 = S1.replace( "dao", "fast", 1 )   # replace the first "dao" with "fast";
S3 = S1.replace( "dao", "fast", -1 )  # replace the last  "dao" with "fast";
S4 = S1.replace( "dao", "fast", 0 )   # replace all "dao" with "fast";
@[code]


@[subsubsection]
expand(invar self:string,invar subs:map<...>|tuple<...>,spec="$",keep=1)=>...
@[subsubsection]
@[code]
expand( invar self: string, invar subs: map<string,string>|tuple<...:string>,
		spec = "$", keep = 1 ) => string
@[code]
Expand this string into a new string with substrings from the keys
of "subs" substituted with the corresponding values of "subs".

If "spec" is not an empty string, each key has to be occurred inside
a pair of parenthesis preceded with "spec", and the "spec", the
parenthesis and the key are together substituted by the corresponding
value from "subs";

If "spec" is not empty and "keep" is zero, "spec(key)"
that contain substrings not found in the keys of "subs" are removed;
Otherwise kept.


Examples,
@[code]
S1 = '<a href="@(url)">@(name)</a>'
keyvalues = { "url" => "http://daovm.net", "name" => "Dao Website" }
S2 = S1.expand( keyvalues, "@" )  # <a href="http://daovm.net">Dao Website</a>
@[code]


@[subsubsection]
split(invar self:string,sep="")=>list<string>
@[subsubsection]
@[code]
split( invar self: string, sep = "" ) => list<string>
@[code]
Split the string by seperator "sep", and return the tokens as a list.

If "sep" is empty, split at character boundaries assuming UTF-8 encoding.


Examples,
@[code]
S1 = "dao::io::stdio"
L1 = S1.split( "::" )  # { "dao", "io", "stdio" }

S2 = "道语言"
L2 = S2.split()  # { "道", "语", "言" }
@[code]


@[subsubsection]
iterate(invar self:string,unit:enum<byte,char>=$byte)[char:int,index:int]
@[subsubsection]
@[code]
iterate( invar self: string, unit: enum<byte,char> = $byte )[char: int, index: int]
@[code]
Iterate over each unit of the string.

If "unit" is "$byte", iterate per byte;

If "unit" is "$char", iterate per character; Assuming UTF-8 encoding;

Each byte that is not part of a valid UTF-8 encoding unit is iterated once.

For the code section parameters, the first will hold the byte value or
character codepoint for each iteration, and the second will be the byte
location in the string.


Examples,
@[code]
@[code]




@[subsubsection]
offset(invar self:string,charIndex:int)=>int
@[subsubsection]
@[code]
offset( invar self: string, charIndex: int ) => int
@[code]
Get byte offset for the character with index "charIndex".



@[subsubsection]
char(invar self:string,charIndex:int)=>string
@[subsubsection]
@[code]
char( invar self: string, charIndex: int ) => string
@[code]
Get the character with index "charIndex".





@[subsection]
Pattern Matching Methods
@[subsection]

Please see @[node]dao.type.string.pattern@[node] for more information.



@[code]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> string
match( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> tuple<start:int,end:int>|none
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = -1 ) => string
capture( invar self: string, pattern: string, start = 0, end = -1 ) => list<string>
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
scan( invar self: string, pattern: string, start = 0, end = -1 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>
@[code]


@[text]








load help_dao_type_string_pattern;
