load help;


################################################################################
################################################################################
########
######## String Pattern Matching
########
################################################################################
################################################################################

@[name]
dao.type.string.pattern
@[name]

@[title]
String Pattern Matching
@[title]

@[text]


@[subsection]Introduction@[subsection]

Dao has built-in support for regular expression based string pattern matching.
A regular expression (@[cyan]regex@[cyan]) is a string representing a pattern (rules),
from which a set of strings can be constructed.
The pattern represented by a regular expression is used to search
in a string for sub-strings that can be constructed from that pattern,
namely sub-strings that match that pattern.
A number of operations can be performed on the resulting sub-strings,
including extraction, replacing and splitting etc.



@[subsection]Character Class@[subsection]

A character class is used to identify a set of characters.
@[list]
--@[green]x@[green] : ordinary characters represent themselves, excluding magic characters @[green]^$|()%.[]*+-?{}<>@[green];
--@[green].@[green] : a dot represents any characters;
--@[green]%a@[green] : all alphabetic characters;
--@[green]%s@[green] : all white space characters;
--@[green]%k@[green] : all control characters;
--@[green]%p@[green] : all punctuation characters;
--@[green]%d@[green] : all digits;
--@[green]%x@[green] : all hexadecimal digits;
--@[green]%c@[green] : all lower case characters;
--@[green]%e@[green] : all CJK (Chinese, Japanese, Korean) characters;
--@[green]%w@[green] : all alphabetic characters, digists and character @[green]_@[green];
--@[green]%A@[green] : non alphabetic characters, complement of @[green]%a@[green];
--@[green]%S@[green] : non white space characters, complement of @[green]%s@[green];
--@[green]%K@[green] : non control characters, complement of @[green]%k@[green];
--@[green]%P@[green] : non punctuation characters, complement of @[green]%p@[green];
--@[green]%D@[green] : non digits, complement of @[green]%d@[green];
--@[green]%X@[green] : non hexadecimal digits, complement of @[green]%x@[green];
--@[green]%C@[green] : upper case characters;
--@[green]%E@[green] : non CJK (Chinese, Japanese, Korean) characters;
--@[green]%W@[green] : complement of @[green]%w@[green];
--@[green]%x@[green] : represents character @[green]x@[green], where @[green]x@[green] is
any non-alphanumeric character; @[green]x@[green] may also be an alphabetic 
character if it is not one of the character class symbols or @[green]b@[green]
or @[green]B@[green].
--@[green][set]@[green] : represents the union of all characters in @[green]set@[green];
a range of characters starting from a character @[green]x@[green] 
up to another character @[green]y@[green] can be included in @[green]set@[green] 
as @[green]x-y@[green]; the above character classes can also be included in @[green]set@[green];
--@[green][^set]@[green] : complement of @[green][set]@[green];
@[list]


@[subsection]Pattern Item@[subsection]

A pattern item can be
@[list]
-- a single character class;
--@[green]^@[green] : match at the begin of a string;
--@[green]$@[green] : match at the end of a string;
--@[green]%n@[green] : match @[green]n@[green]-th captured sub string; @[green]n@[green] can be one or more digits;
--@[green]{{verbatim}}@[green] : match verbatim text without escapes;
--@[green]%bxy@[green] : match a balanced pair of characters @[green]x@[green] and @[green]y@[green];
here balance means, starting from the same matched position, 
the mached sub string should contain 
the same number and minimum number of @[green]x@[green] and @[green]y@[green];
the same as that in Lua;
--@[green]%B{pattern1}{pattern2}@[green] : match a balanced pair of patterns
@[green]pattern1@[green] and @[green]pattern2@[green]; here balance has the same meaning as in
@[green]%bxy@[green];
@[list]

A pattern item @[green]e@[green] can be optional skiped or matched repeatedly as indicated by:
@[list]
--@[green]e?@[green] : match zero time or once;
--@[green]e*@[green] : match zero time or any number of times;
--@[green]e+@[green] : match once or more;
--@[green]e{n}@[green] : match exactly @[green]n@[green] times;
--@[green]e{n,}@[green] : match at least @[green]n@[green] times;
--@[green]e{,n}@[green] : match at most @[green]n@[green] times;
--@[green]e{n,m}@[green] : match at least @[green]n@[green] times and at most @[green]m@[green] times;
@[list]


@[subsection]Grouping and Captures@[subsection]

In a pattern, one or more pattern items can be grouped together 
by parenthesis to form sub patterns (group). 
Alternative patterns in a group can be separated by @[green]|@[green],
and the group could be optionally skipped if an empty alternative pattern is
specified as @[cyan](|pattern)@[cyan] or @[cyan](pattern|)@[cyan].
When a string is matched to
a pattern, the sub strings that match the groups of sub patterns
can be captured for other use. Captures are numbered according to their
left parenthesis. For example, in pattern @[cyan](%a+)%s*(%d+(%a+))@[cyan],
the first @[cyan](%a+)@[cyan] will have group number 1, and @[cyan](%d+(%a+))@[cyan]
will have group number 2, and the second @[cyan](%a+)@[cyan] will have group number 3.
For convenience, the whole pattern has group number 0.


In case there are multiple possible ways of matching a substring starting
from the same position, the matching length is calculated as the sum
of the lengths of the sub-matches of all groups (including number 0 group) 
in the pattern, and the matching giving maximum matching length is 
returned as the result. In this way, one can put a deeper nesting of parenthesis
around a group, if one want that group has high priority to be matched.
For example, when @[cyan]1a2@[cyan] is matched to patterh @[cyan](%d%w*)(%w*%d)@[cyan],
there are two possible ways of macthing, namely, @[cyan]1a@[cyan] matching to @[cyan](%d%w*)@[cyan]
and @[cyan]2@[cyan] matching to @[cyan](%w*%d)@[cyan], or @[cyan]1@[cyan] matching to @[cyan](%d%w*)@[cyan]
and @[cyan]a2@[cyan] matching to @[cyan](%w*%d)@[cyan],
but if an extra parenthesis is added to one of the group, for example, as
@[cyan](%d%w*)((%w*%d))@[cyan], then the matching becomes unique, which is
the second way of matching where letter @[cyan]a@[cyan] is matched in the last group.



@[subsection]
String Matching Methods
@[subsection]

Like in Lua, the regular expression matching functionalities are accessed
through various string methods. The regular expression patterns are stored 
in strings, and passed to these string methods. 
Each pattern string corresponds to an internal representation of a regular expression,
which are compiled from the pattern string at the first time it is used.
Though the strings that represent the same pattern can be passed multiple times 
to these methods, they are compiled only once in one process (virtual machine process).
So the overhead of compiling a regular expression can be normally ignored.


The following methods are provided:
@[code]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = 0 )
	=> string
match( invar self: string, pattern: string, group = 0, start = 0, end = 0 )
	=> tuple<start:int,end:int>|none
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = -1 ) => string
capture( invar self: string, pattern: string, start = 0, end = 0 ) => list<string>
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
scan( invar self: string, pattern: string, start = 0, end = 0 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>
@[code]


@[subsubsection]
fetch(invar self:string,pattern:string,group=0,start=0,end=0)=>string
@[subsubsection]
@[code]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = 0 )
	=> string
@[code]
Fetch the substring that matches the "group"-th group of pattern "pattern".

Only the region between "start" (inclusive) and "end" (exclusive) is searched.

When the "end" parameter is not used explicitly, the region will range from
"start" to the end of the string.


Examples,
@[code]
S1 = "ABC123DEF456GHI"
S2 = S1.fetch( "%d+" )          # S2 = "123"
S3 = S1.fetch( "%d+(%a+)", 1 )  # S3 = "DEF"
S4 = S1.fetch( "%d+", 0, 6 )    # S4 = "456"
@[code]


@[subsubsection]
match(invar self:string,pattern:string,group=0,start=0,end=0)=>...
@[subsubsection]
@[code]
match( invar self: string, pattern: string, group = 0, start = 0, end = 0 )
	=> tuple<start:int,end:int>|none
@[code]
Match part of this string to pattern "pattern".

If matched, the indexes of the first and the last byte of the matched
substring will be returned as a tuple. If not matched, "none" is returned.

Parameter "start" and "end" have the same meaning as in string::fetch().


Examples,
@[code]
S1 = "ABC123DEF(456)GHI"
M2 = S1.match( "%d+" )          # M2 = (start=3,end=5); substring: "123"
M3 = S1.match( "%b()" )         # M3 = (start=9,end=13); substring: "(456)"
M4 = S1.match( "%b{}" )         # M4 = none;
M5 = S1.match( "%d+(%a+)", 1 )  # M5 = (start=6,end=8); substring: "DEF"
@[code]


@[subsubsection]
change(invar self:string,pat:string,tar:string,index=0,start=0,end=0)=>string
@[subsubsection]
@[code]
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = 0 ) => string
@[code]
Change the part(s) of the string that match pattern "pattern" to "target".
And return a new string.

The target string "target" can contain back references from pattern "pattern".

If "index" is zero, all matched parts are changed; otherwise, only
the "index"-th match is changed.

Parameter "start" and "end" have the same meaning as in string::fetch().


Examples,
@[code]
S1 = "ABC123DEF456GHI"
S2 = S.change( "%d+", ";" )          # S2 = "ABC;DEF;GHI"
S3 = S.change( "(%d+)", "<%1>", 1 )  # S3 = "ABC<123>DEF456GHI"
@[code]


@[subsubsection]
capture(invar self:string,pattern:string,start=0,end=0)=>list<string>
@[subsubsection]
@[code]
capture( invar self: string, pattern: string, start = 0, end = 0 ) => list<string>
@[code]
Match pattern "pattern" to the string, and capture all the substrings that
match to each of the groups of "pattern". Return these substrings as a list,
and in this list, the i-th string corresponds to the i-th pattern group.

Note that the pattern groups are indexed starting from one,
and zero index is reserved for the whole pattern.

Parameter "start" and "end" have the same meaning as in string::fetch().


Examples,
@[code]
S1 = "ABC123DEF456GHI"
L1 = S1.capture( "%d+" )        # L1 = { "123" }
L2 = S1.capture( "%d+ (%a+)" )  # L2 = { "123DEF", "DEF" }
@[code]


@[subsubsection]
extract(invar self:string,pattern:string,mtype:enum<...>=$matched)=>...
@[subsubsection]
@[code]
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
@[code]
Extract the substrings that match to, or are between the matched ones,
or both, and return them as a list.


Examples,
@[code]
S1 = "ABC123DEF456GHI"
L1 = S1.extract( "%d+" )   # L1 = { "123", "456" }
L2 = S2.extract( "%d+", $unmatched )  # L2 = { "ABC", "DEF", "GHI" }
@[code]


@[subsubsection]
scan(invar self:string,pattern:string,start=0,end=0)[...]=>list<@V>
@[subsubsection]
@[code]
scan( invar self: string, pattern: string, start = 0, end = 0 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>
@[code]
Scan the string with pattern "pattern", and invoke the attached code
section for each matched substring and substrings between matches.

The start and end index as well as the state of matching or not matching
can be passed to the code section.

Parameter "start" and "end" have the same meaning as in string::fetch().


Examples,
@[code]
S1 = "ABC123DEF"
S1.scan( "%d+" ) { [start, end, state]
	io.writeln( start, end, S1[start:end], state )
}
# Output:
# 0 2 ABC $unmatched(0)
# 3 5 123 $matched(1)
# 6 8 DEF $unmatched(0)
@[code]


@[text]

