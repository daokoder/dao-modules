load help;

@[name]
dao.module
@[name]

@[title]
Module Loading
@[title]



@[name]
dao.module.std
@[name]

@[title]
Built-in Standard Module
@[title]

@[text]
@[code]
version( verbose = 0 ) => string
path( path: string, action: enum<set,add,remove> = $add )
compile( source: string, import: any = none ) => tuple<namespace:any,main:routine>
eval( source: string, st = io::stdio ) => any
load( file: string, import = 1, runim = 0 ) => namespace
resource( path: string ) => string
about( invar ... : any ) => string
debug( invar ... : any )
warn( info: string )
error( info: string )
error( errorObject: Error )
error( errorType: class<Error>, info: string, data: any = none )
exec() [=>@T] => @T
exec( defaultValue: @T ) [=>@T] => @T
try() [=>@T] => list<Error>|Error|@T
@[code]
@[text]








@[name]
dao.module.io
@[name]

@[title]
Built-in IO (Input/Output) Module
@[title]


@[name]
dao.module.io.method
@[name]

@[title]
IO Module Methods
@[title]

@[text]
@[code]
open( type: enum<string,tmpfile> = $string )=>stream
open( file: string, mode: string )=>stream
open( fileno: int, mode: string )=>stream
write( invar ... : any )
writef( format: string, invar ... : any )
writeln( invar ... : any )
read( )=>string
read( file: string, silent=0 )=>string
readlines( file: string, chop=0 )[line: string=>none|@T]=>list<@T>
@[code]
@[text]


@[name]
dao.module.io.stream
@[name]

@[title]
IO Stream Type
@[title]

@[name]
dao.module.io.stream.method
@[name]

@[title]
IO Stream Methods
@[title]

@[text]
@[code]
stream( type: enum<string,tmpfile> = $string )=>stream
stream( file: string, mode: string )=>stream
stream( fileno: int, mode: string )=>stream
write( self: stream, invar ... : any )
writef( self: stream, format: string, invar ... : any )
writeln( self: stream, invar ... : any )
read( self: stream, amount: int|enum<line,all> = $all )=>string
readlines( self: stream, numline=0, chop=0 )[line: string=>none|@T]=>list<@T>

flush( self: stream )
close( self: stream )
seek( self: stream, pos: int, from: enum<begin,current,end> )=>int
tell( self: stream )=>int
fileno( self: stream )=>int
enable( self: stream, what: enum<auto_conversion>, state: bool )
check( self: stream, what: enum<readable,writable,is_open,is_eof,auto_conversion> ) => bool
@[code]
@[text]










@[name]
dao.module.mt
@[name]

@[title]
Built-in Multi-threading Module
@[title]


@[text]


@[code]
critical()[]
start( when : enum<auto,now> = $auto )[=>@V] =>future<@V>
iterate( times :int, threads=2 )[index:int,threadid:int]

iterate( alist :list<@T>, threads=2 )[item:@T,index:int,threadid:int]
map( alist :list<@T>, threads=2 )[item:@T,index:int,threadid:int =>@T2] =>list<@T2>
apply( alist :list<@T>, threads=2 )[item:@T,index:int,threadid:int =>@T] =>list<@T>
find( alist :list<@T>, threads=2 )[item:@T,index:int,threadid:int =>int] =>tuple<index:int,item:@T>|none

iterate( amap :map<@K,@V>, threads=2 )[key:@K,value:@V,threadid:int]
map( amap :map<@K,@V>, threads=2 )[key:@K,value:@V,threadid:int =>@T] =>list<@T>
apply( amap :map<@K,@V>, threads=2 )[key:@K,value:@V,threadid:int =>@V] =>map<@K,@V>
find( amap :map<@K,@V>, threads=2 )[key:@K,value:@V,threadid:int =>int] =>tuple<key:@K,value:@V>|none

iterate( aarray :array<@T>, threads=2 )[item:@T,I:int,J:int,K:int,L:int,M:int,threadid:int]
map( aarray :array<@T>, threads=2 )[item:@T,I:int,J:int,K:int,L:int,M:int,threadid:int =>@T2] =>array<@T2>
apply( aarray :array<@T>, threads=2 )[item:@T,I:int,J:int,K:int,L:int,M:int,threadid:int =>@T] =>array<@T>
@[code]





@[text]
