load help;


@[name]
dao.routine
@[name]

@[title]
Routine
函数
@[title]

@[text]

函数是一相对独立的代码块，可在需要的地方和时候反复调用。
它可以接受参数以改变函数的行为。
它也可将结果返回给它的调用者。


@[subsection]
定义
@[subsection]

道函数可由关键字@[green]routine@[green]定义。例如：
@[code(dao)]
routine func( first, second )
{
   first += 10;
   second += "test";
   return first, second; # 返回多个值;
}

(ret1, ret2) = func( 111, "AAA" );
ret3 = func( ret1, ret2 );
@[code(dao)]
这里定义了一个可带两个参数作为输入，并返回两个值作为输出。



@[subsection]参数类型与缺省值@[subsection]

道函数的参数可以有类型标注，也可以有缺省值：
@[code]
routine MyRout( name: string, index = 0 )
{
   io.writeln( "NAME  = ", name )
   io.writeln( "INDEX = ", index )
}
@[code]
这里参数@[cyan]name@[cyan]的类型被声明为字符串，
参数@[cyan]index@[cyan]的缺省值被声明为零（它的类型也就被自动声明为整型）。
任何带缺省值的参数后面的参数必须都带缺省值。



@[subsection]函数重载@[subsection]

道语言里，函数可按参数类型进行重载。也就是可对于拥有不同参数类型的函数
使用同样的名称，函数调用时，道虚拟机根据调用中的参数选择正确的函数来运行。
@[code]
routine MyRout( index: int, name = "ABC" )
{
   io.writeln( "INDEX = ", index )
   io.writeln( "NAME  = ", name )
}

MyRout( "DAO", 123 )     # 调用上例中的MyRout()
MyRout( 456, "script" )  # 调用此例中的MyRout()
@[code]



@[text]






@[name]
dao.routine.closure
@[name]

@[title]
匿名函数和函数闭包
@[title]


@[text]

道语言里函数是基本类型。因此它们可在运行时创建并跟其他对象一样使用。
运行时创建的函数是匿名函数或函数闭包。


创建匿名函数或函数闭包的语法跟普通函数几乎等同，只有以下几点比较特殊：
@[list]
== 无函数名；
== 它可以使用外部函数的局部变量；
@[list]
如果一个被创建的函数需要访问外部局部变量，那么这个函数将以函数闭包的形式
创建，否则以匿名函数的方式创建。


下面是个简单的例子：
@[code]
rout = routine( name: string, value = 0 ){
	io.writeln( name, value )
	return name.size() + value
}
rout( "abc", 123 )
@[code]
这里与普通函数定义的唯一区别是没有函数名。


在上面例中的，被创建的函数没访问外层函数的局部变量，因此它被创建为普通的匿名函数。
这里将介绍另一例子，这个例子中被创建的函数将访问其外层函数的局部变量：
@[code]
routine MakeClosure( start: int )
{
	return routine( offset: int ){
		return start + offset
	}
}
rout = MakeClosure( 100 );
rout( 123 )
@[code]
这例中创建的函数访问了外层函数"MakeClosure()"的"start"局部变量，
那么这个被创建的函数将以函数闭包的形式创建。
当一个函数闭包被创建时，它所访问的外层局部变量将被存在被创建的函数中。
对于基本类型的局部变量，它们的值将被拷贝，而其它类型的变量，则仅被保存引用。
一旦函数闭包被创建，它们将不再需要它的创建环境就可使用。


匿名函数和函数闭包之间的主要区别在于是否有对外层函数局部变量的访问。
这个区别导致了它们的运行时的创建方式比较不一样：
函数闭包总是以新函数对象创建；而匿名函数则有可能返回同一个函数对象。
例如下面的匿名函数总返回同一个函数对象：
@[code]
routine MakeRoutine()
{
	return routine( value: double ){
		return value * value
	}
}
io.writeln( MakeRoutine(), MakeRoutine() )
@[code]
要这种情况发生，匿名函数不但不能访问外层函数的局部变量，也不能有静态变量。
如果有静态变量，它将跟函数闭包一样以新的函数对象创建。
例如下面的匿名函数创建每次都会生成一个不同的函数对象。
@[code]
routine MakeRoutine()
{
	return routine( value: double ){
		static dummy = 123
		return value * value
	}
}
io.writeln( MakeRoutine(), MakeRoutine() )
@[code]


@[text]








@[name]
dao.routine.section
@[name]

@[title]
代码块方法
@[title]


@[text]


代码块方法是一种特殊的函数或方法。对这种函数的调用需要附加一个代码块。
这个代码块相当于该函数调用的一个隐式额外参数。当这样的函数调用被执行时，
该函数将恰当地执行该代码块，并可能利用该代码块执行的结果。
并且这种代码块本身也类似一个函数，可以有参数，也可以有返回值。


其他语言里与道语言代码块方法最接近的是Ruby里的代码块方法。
不过在Ruby里，代码块方法的调用所附加的代码块被编译为函数闭包，
该闭包以隐式的额外参数传递给被调用的代码块方法。
道语言里代码块方法的代码块确实是个代码块，它存在于调用代码块方法的函数中。
也就是说，运行时没有产生函数闭包，而是直接在调用者的函数中定位并被执行。
这种代码块的优势是没有创建函数闭包的额外开销。


代码块方法是相对于其他语言里的函数式方法的一个更好的替代品。
它使得它的使用更直观自然。例如，它避免了在函数调用的参数里
写庞大的匿名函数或闭包，很大程度上增加了代码的可读性。


要定义一个代码块方法，用户需要定义两套参数和返回值：
一套为方法的普通参数和返回值；另一套为代码块的参数和返回值。
@[code]
routine meth_name( meth_params ) [sect_params => sect_return] => meth_return
{
	...
}
@[code]
这里的参数列表@[code]sect_params@[code]表示什么类型的参数该代码块方法将传递给
它的代码块；而返回值类型@[code]sect_return@[code]则表示代码块应该返回什么类型的结果值。


代码块方法的调用如下：
@[code]
returned = meth_name( meth_params ) {
	code_block
}
@[code]
如果一个代码块方法不含普通的参数，那么它的调用可简单地变成：
@[code]
returned = meth_name {
	code_block
}
@[code]
缺省情况下，代码块可通过预先隐式定义的参数@[code]X@[code]和@[code]Y@[code]
接受代码块方法传递进的参数值。用户可以显式声明更有意义的参数：
@[code]
returned = meth_name { [index, item]
	code_block
}
@[code]


作为一个例子，列表类型有个可用来排序的代码块方法，它的原型如下：
@[code]
sort( self :list<@T>, k=0 ) [X :@T, Y :@T => int] => list<@T>
@[code]
这里代码块的参数@[code]X@[code]和@[code]Y@[code]被用来传递列表的两元素值，
以便有代码块作比较。此代码块将依据代码块比较元素的结果作排序。
因此该@[code]sort()@[code]方法可按如下方式使用:
@[code]
numlist = { 11, 44, 21, 32, 56, 67, 25 }

# 按升序排序:
numlist.sort { X < Y }

# 按降序排序，直到最大的三个值被排好:
numlist.sort( 3 ) { X > Y }
# 现在numlist的前三个元素即最大的三个元素;

tuplist = { ( 2, 'ghi' ), ( 1, 'def' ), ( 2, 'abc' ), ( 1, 'abc' ) }
tuplist.sort {
	# 先按元组的第一个元素排序:
	if( X[0] != Y[0] ) return X[0] < Y[0];
	# 再按第二个元素排序:
	return X[1] < Y[1];
}
@[code]


在用户定义的代码块方法里，@[code]yield@[code]语句可用来执行该方法被调用时所
附加的代码块。@[code]yield@[code]的参数将被传递给代码块，而代码块的返回值
则以@[code]yield@[code]的返回值返回。
下面是一个简单的用户定义代码块方法例子：
@[code]
# 一个可带代码块调用的函数。
# 代码块可接受一个整数为参数，并返回一个字符串。
routine Test() [X :int => string] => string
{
	io.writeln( 'In functional method!' );
	s = yield( 123 ); # 执行代码块;
	io.writeln( 'Yielded value:', s );
	return s;
}

Test {
	io.writeln( 'In code section:', X );
	return 'abc';
}
@[code]


@[text]



@[name]
dao.routine.decorator
@[name]

@[title]
修饰器函数
@[title]

@[text]


修饰器函数是另一种特殊的函数。这种函数可通过修饰其它函数来增强其功能。
这种函数的修饰方式既可修改原函数，也可返回新的函数。


函数可通过不同的途径被修饰，但只有在函数的定义处被修饰才会改变该函数。
其他方式都将生成新的修改后的函数。


修饰器函数的定义跟普通函数的定义基本一样。不过它的函数名需要带@[code]@@[code]前缀，
且其第一个参数必须是一函数类型。此函数类型将决定该修饰器函数可以修饰哪些类型的函数。
另外，第一个参数还需附带一个变量名，以表示修饰后的函数被调用时的参数。


@[subsection]
可修饰任意函数的修饰器函数
@[subsection]

要定一个可修饰任意函数的修饰器函数，它的第一参数里的函数类型必须
最通用的函数类型@[code]routine@[code]。


这里是一个这样的简单的修饰器函数：
@[code]
routine @Decorator( func(args): routine )
{
	io.writeln( 'Calling function:', std.about(func) );
	return func( args, ... ); # ... 参数扩展;
}
@[code]


在函数定义的地方修饰函数：
@[code]
@Decorator()
routine Function(){ io.writeln( 'Function()' ); }
@[code]
修饰器函数的第二个及其后面的参数需放在@[code]@Decorator()@[code]的括号里。
被它修饰的函数将总作为第一个参数传递给它。


如果修饰器函数不带除被修饰的函数之外的参数，它后面的括号可省略：
@[code]
@Decorator
routine Function( a: int ){ io.writeln( 'Function(int)', a ); }

Function();
Function(123);
@[code]



@[subsection]
修饰某些特定函数类型的修饰器函数
@[subsection]

修饰器函数也可被定义为只能修饰某些特定函数类型的修饰器函数。
要这样定义，仅需将其第一个参数里函数类型表达为所能修饰的函数类型即可。


下面定义的修饰器函数只能被用来修饰以整型为参数和字符串类型为返回值的函数。
这个修饰器函数还定义了额外的参数，用来表示被修饰函数所期望的返回值。
@[code]
routine @TestDecorator( func(args): routine<index:int=>string>, expected = '' )
{
	res = func( args, ... );
	io.writeln( res );
	io.writeln( 'Test result:', res == expected ? 'passed': 'failed' );
	return res;
}

@TestDecorator( 'Hello' )
routine Hello( index = 0 )
{
	io.writeln( 'Calling Hello(int)' );
	return 'Hello';
}

Hello();
@[code]



@[subsection]
修饰器函数的重载
@[subsection]

修饰器函数可以象普通函数那样根据参数进行重载。


下面是一个重载的修饰器函数，它只能用来修饰以字符串类型为参数且以整型为返回值的函数：
@[code]
routine @TestDecorator( func(args): routine<name:string=>int>, expected = 0 )
{
	res = func( args, ... );
	io.writeln( res );
	io.writeln( 'Test result:', res == expected ? 'passed' : 'failed' );
	return res;
}
@[code]



# 多个修饰器函数可以连起来用:
@[code]
@Decorator
@TestDecorator( 123 )
routine Hello( name: string )
{
	io.writeln( 'Calling Hello(string)', name );
	return 123;
}

io.writeln( Hello( 'abc' ) );
@[code]



@[subsection]
表达式里的函数修饰
@[subsection]

修饰器函数可以按普通函数一样的方式用在表达式里。
也就是允许象调用普通函数那样调用修饰器函数，
并将被修饰函数和其他值以参数的形式传递给修饰器函数。
@[code]
anotherHello = @Decorator( Hello )
@[code]
这种方式修饰函数将产生新的修饰后的函数。


如果所有传递给修饰器函数的参数都为常量，那么这个函数修饰表达式
可在编译时求值。
@[code]
const Hello3 = @Decorator( Hello )
Hello3( 'def' )
@[code]

这个特性可用来修改从其他模块载入的函数，并使用同样的函数名。
@[code]
load MyModule  # 假定这个模块定义MyFunction()函数;

# 用函数修饰创建一个同名的新函数:
const MyFunction = @MyDecorator( MyFunction )
@[code]


在非常量表达式里修饰函数，函数的修饰将在运行时进行：
@[code]
routine Hello2( index = 123 )
{
	io.writeln( 'Calling Hello2(int)', index );
	return 'Hello';
}
# 运行时函数修饰:
func = @TestDecorator( Hello2, 'Hello' );
io.writeln( '--------' )
func(123)

func = @TestDecorator( func );
io.writeln( '--------' )
func(123)
@[code]


也同普通函数一样，修饰器函数也可被赋与变量并在运行时使用。
@[code]
deco = @Decorator;
func = deco( func );

io.writeln( '--------' )
func(789);
@[code]



@[subsection]
可修饰类成员方法的修饰器函数
@[subsection]

修饰器函数也可用来修饰类成员方法。
这种修饰器函数即可定义在类外面，也可定义在类里面。


如果修饰器函数的被修饰函数类型部包括@[code]self@[code]参数，
那么它可被用来修饰类静态方法：
@[code]
routine @StaticDecorator( meth(args) :routine<id:int=>int>, value = 123 )
{
	io.writeln( args, value );
	args.id = value;
	return meth( args, ... );
}
@[code]
否则它可用来修饰类实例方法：
@[code]
routine @MethodDecorator( meth(args) :routine<self:@T,id:int=>int>, value = 123 )
{
	io.writeln( args, value );
	args.id = value;
	return meth( args, ... );
}
@[code]


当修饰器函数被定义在类里时，它必须被声明为静态方法。
因为它的第一个参数必须是被修饰函数类型。
@[code]
class Klass
{
	static routine @ClassDecorator( meth(args) :routine<id:string=>?>, value = 'abc' ){
		io.writeln( args, value );
		args.id = value;
		return meth( args, ... );
	}

	@StaticDecorator( 456 )
	static routine StaticMeth( id :int ){ io.writeln( id ); return id }

	@ClassDecorator
	static routine StaticMeth( id :string ){ io.writeln( id ) }

	@MethodDecorator( 789 )
	routine Meth( id :int ){ io.writeln( id ); return id }
}

Klass::StaticMeth( 0 );
Klass::StaticMeth( 'a' );

k = Klass();
k.Meth(1);
@[code]


@[text]
