load help;

@[name]
dao.type.string
@[name]

@[title]
字符串类型
@[title]

@[text]

字符串@[code]string@[code]类型是一个表示一组字节的基本类型。
道字符串并不以空字符作为结尾标志，因此道字符串类型可用字节的形式储存任意数据。
不过当字符串用作文本处理时，它一般被假定为使用UTF-8编码。


@[subsection]基本定义@[subsection]

字符串可已被表示为一双单引号或双引号引用的一串字符。
@[code(syntax)]
SingleQuoteString ::= ' ' ' ValidCharSequence ' ' '
DoubleQuoteString ::= ' " ' ValidCharSequence ' " '
@[code(syntax)]
这里@[green]ValidCharSequence@[green]可以是除了不带转义反斜杠的引号之外的任意字符。
字符串常量里任意字符前都可带转义反斜杠，不过通常只有特殊字符需要这样作。
如制表符可用@[green]\t@[green]表示，换行符可用@[green]\n@[green]和回车键
用@[green]\r@[green]。没有特殊含义的转义表示反斜杠后面的字符本身。
如果想以ASCII码或UFF-8编码的形式直接表示某个字符，
可以将那些码以转义的形式嵌入字符串常量：
@[list]
-- 单个十进制数字: @[green]\d@[green];
-- 最多三个八进制数字: @[green]\ooo@[green];
-- 反斜杠后加@[green]x@[green]可带多达两个十六进制的数字:
   @[green]\xhh@[green];
-- 反斜杠后加@[green]u@[green]可带多达四个十六进制的数字:
   @[green]\uhhhh@[green];
-- 反斜杠后加@[green]U@[green]可带多达八个十六进制的数字:
   @[green]\Uhhhhhhhh@[green];
@[list]




@[subsection]Verbatim字符串@[subsection]

Verbatim字符串常量是一种不需要使用转义字符而表示所有字符的字符串常量形式。
这种字符串常量有一对@[code(syntax)]'@['[Delimiter]']'@[code(syntax)]引用：
@[code(syntax)]
VerbatimString ::= '@[' [Delimiter] ']' Characters '@[' [Delimiter] ']'
@[code(syntax)]
这里@[code(syntax)]Delimiter@[code(syntax)]可包含字母，数字，下划线，
空格符，点，冒号，减号和等号等符号。
它必须保证@[code(syntax)]'@['[Delimiter]']'@[code(syntax)]不在它所引用的
字符串里出现。


@[subsection]例子@[subsection]

@[code]
mbs = 'hello'
wcs = "道语言"
mbs2 = 'It\'s green'
wcs2 = "\u9053\u8bed\u8a00" # the same as wcs;

# verbatim strings:
mbs = @[] some text @[]

# C++ codes in verbatim string:
cpp =
@[cpp x]
class AA
{
	int index;
};
struct BB{};
@[cpp x]


# Lua codes in verbatim string:
lua =
@[lua]
local a = 1;
function Test()
	io.write( 'Hello' )
end
@[lua]

# HTML codes in verbatim string:
html =
@[html:123456]
<body>
<span name="test"></span>
</body>
@[html:123456]
@[code]

@[text]


################################################################################
################################################################################
########
######## String methods
########
################################################################################
################################################################################

@[name]
dao.type.string.method
@[name]

@[title]
字符串方法
@[title]

@[text]

下面是字符串类型所支持的方法：
@[code]
string( count: int, char = 0 ) => string
string( count: int )[index: int => string] => string
size( invar self: string, utf8 = false ) => int
insert( invar self: string, str: string, pos = 0 ) => string
erase( invar self: string, pos = 0, count = -1 ) => string
chop( invar self: string, utf8 = 0 ) => string
trim( invar self: string, where: enum<head;tail> = $head+$tail, utf8 = 0 ) => string
find( invar self: string, str: string, from = 0, reverse = 0 ) => int
convert( invar self: string, to: enum<local,utf8,lower,upper> ) => string
replace( invar self: string, str1: string, str2: string, index = 0 ) => string
expand( invar self: string, invar subs: map<string,string>|tuple<...:string>,
		spec = "$", keep = 1 ) => string
split( invar self: string, sep = "" ) => list<string>
iterate( invar self: string, unit: enum<byte,char> = $byte )[char: int, index: int]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> string
match( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> tuple<start:int,end:int>|none
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = -1 ) => string
capture( invar self: string, pattern: string, start = 0, end = -1 ) => list<string>
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
scan( invar self: string, pattern: string, start = 0, end = -1 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>

offset( invar self: string, charIndex: int ) => int
char( invar self: string, charIndex: int ) => string
@[code]


@[subsection]
初始化方法
@[subsection]

除了可用字符串常量生成字符串外，下面的字符串初始化方法
可用来方便灵活地产生字符串。
@[code]
string( count: int, char = 0 ) => string
string( count: int )[index: int => string] => string
@[code]


@[subsubsection]
string(count:int,char=0)=>string
@[subsubsection]
@[code]
string( count: int, char = 0 ) => string
@[code]
创建并返回一个由"count"个"char"字符组成的字符串。


例子：
@[code]
S1 = string( 5, 'S'[0] )   # SSSSS
S2 = string( 3, 0x9053 )   # 道道道
@[code]


@[subsubsection]
string(count:int)[index:int=>string]=>string
@[subsubsection]
@[code]
string( count: int )[index: int => string] => string
@[code]
创建并返回一个由代码块的"count"个结果字符串连接而成的字符串。


例子：
@[code]
S1 = string( 5 ){ "S" }       # SSSSS
S2 = string( 2 ){ "道语言" }  # 道语言道语言
S3 = string( 6 ){ [index] (string) index }  # 012345
@[code]


@[subsection]
普通方法
@[subsection]

下面是可用来方便操作字符串的方法：
@[code]
size( invar self: string, utf8 = false ) => int
insert( invar self: string, str: string, pos = 0 ) => string
erase( invar self: string, pos = 0, count = -1 ) => string
chop( invar self: string, utf8 = 0 ) => string
trim( invar self: string, where: enum<head;tail> = $head+$tail, utf8 = 0 ) => string
find( invar self: string, str: string, from = 0, reverse = 0 ) => int
convert( invar self: string, to: enum<local,utf8,lower,upper> ) => string
replace( invar self: string, str1: string, str2: string, index = 0 ) => string
expand( invar self: string, invar subs: map<string,string>|tuple<...:string>,
		spec = "$", keep = 1 ) => string
split( invar self: string, sep = "" ) => list<string>
iterate( invar self: string, unit: enum<byte,char> = $byte )[char: int, index: int]
offset( invar self: string, charIndex: int ) => int
char( invar self: string, charIndex: int ) => string
@[code]


@[subsubsection]
size(invar self:string,utf8=false)=>int
@[subsubsection]
@[code]
size( invar self: string, utf8 = false ) => int
@[code]
返回字符串里的字节或字符个数。


例子：
例子：
@[code]
S = "ABCDE"
len1 = S.size()
len2 = "XYZ".size()
@[code]

为了效率起见，用户也可考虑使用大小操作符@[code]%@[code]，
@[code]%S@[code]将给出字符串的字符个数。


@[subsubsection]
insert(invar self:string,str:string,pos=0)=>string
@[subsubsection]
@[code]
insert( invar self: string, str: string, pos = 0 ) => string
@[code]
在"pos"处插入"str"；

返回新字符串。


@[subsubsection]
erase(invar self:string,pos=0,count=-1)=>string
@[subsubsection]
@[code]
erase( invar self: string, pos = 0, count = -1 ) => string
@[code]
从"pos"处删除"count"字节；

返回新字符串。


@[subsubsection]
chop(invar self:string,utf8=0)=>string
@[subsubsection]
@[code]
chop( invar self: string, utf8 = 0 ) => string
@[code]
从字符串的末尾切除EOF, '\n', '\r'或'\r\n'。

-- EOF  将先被检查并切除;

-- '\n' 将接下来被检查并切除;

-- '\r' 将最后被检查并切除;

如果参数"utf8"非零，字符串末尾所有不构成有效UTF-8编码的字符都将被切除。


例子：
@[code]
S1 = "line\n"
S2 = S1.chop()

S3 = "道语言"[:7]
S4 = S3.chop( 1 )  # 道语
@[code]


@[subsubsection]
trim(invarself:string,where:enum<head;tail>=$head+$tail,utf8=0)=>string
@[subsubsection]
@[code]
trim( invar self: string, where: enum<head;tail> = $head+$tail, utf8 = 0 ) => string
@[code]
将空白字符从字符串首尾剪除。

如果参数"utf8"非零，字符串首尾所有不构成有效UTF-8编码的字符都将被剪除。


例子：
@[code]
S1 = "\tline\n"
S2 = S1.trim()         # "line"
S3 = S1.trim( $head )  # "line\n"

S4 = "\t道语言"[:7]
S5 = S4.trim()            # "道语??"
S6 = S4.trim( $tail, 1 )  # "\t道语"
@[code]


@[subsubsection]
find(invar self:string,str:string,from=0,reverse=0)=>int
@[subsubsection]
@[code]
find( invar self: string, str: string, from = 0, reverse = 0 ) => int
@[code]
从字符串位置"from"开始查找第一个出现的"str"。

如果参数"reverse"为零，向前查找，否则向后查找；

如果"str"没被找到，返回-1；否则返回，

正向查找到的子字符串的第一个字符位置；

或反向查找到的子字符串的最后那个字符的位置。


例子：
@[code]
S1 = "dao programming language and dao virtual machine"
P1 = S1.find( "dao" )         # Find the first "dao";
P2 = S2.find( "dao", -1, 1 )  # Find the last "dao";
@[code]


@[subsubsection]
convert(invar self:string,to:enum<local,utf8,lower,upper>)=>string
@[subsubsection]
@[code]
convert( invar self: string, to: enum<local,utf8,lower,upper> ) => string
@[code]
转换字符串。可转换为：

-- 系统编码字符串（从UTF-8编码）;

-- UTF-8编码字符串（从系统编码）;

-- 全小写字符;

-- 全大写字符;


例子：
@[code]
S1 = "Dao Language"
S2 = S1.convert( $upper )  # DAO LANGUAGE
S3 = S1.convert( $lower )  # dao language
@[code]


@[subsubsection]
replace(invar self:string,str1:string,str2:string,index=0)=>string
@[subsubsection]
@[code]
replace( invar self: string, str1: string, str2: string, index = 0 ) => string
@[code]
字符串"self"里的子字符串"str1"替换为str2"，并返回新字符串；

如果"index"为零，替换所有的"str1"；

否则，仅替换第"index"个子字符串"str1"；

如果"index"为整数，查找替换将正向进行；

如果"index"为负数，查找替换将反向进行；


例子：
@[code]
S1 = "dao programming language and dao virtual machine"
S2 = S1.replace( "dao", "fast", 1 )   # replace the first "dao" with "fast";
S3 = S1.replace( "dao", "fast", -1 )  # replace the last  "dao" with "fast";
S4 = S1.replace( "dao", "fast", 0 )   # replace all "dao" with "fast";
@[code]


@[subsubsection]
expand(invar self:string,invar subs:map<...>|tuple<...>,spec="$",keep=1)=>...
@[subsubsection]
@[code]
expand( invar self: string, invar subs: map<string,string>|tuple<...:string>,
		spec = "$", keep = 1 ) => string
@[code]
将此"self"字符串里的与"subs"里的键字符串匹配的子字符串替换为对应的值字符串，
并将结果以新的字符串返回。

如果"spec"不为空字符串，那么"subs"里的键字符必须出现在"spec"之后的括号里
才会被替换。替换时"spec"和括号以及键字符串将被一起替换。

如果"spec"不为空且"keep"为零，那么"subs"里没有对应键的"spec(key)"将被删掉，
否则，将被保留。


例子：
@[code]
S1 = '<a href="@(url)">@(name)</a>'
keyvalues = { "url" => "http://daovm.net", "name" => "Dao Website" }
S2 = S1.expand( keyvalues, "@" )  # <a href="http://daovm.net">Dao Website</a>
@[code]


@[subsubsection]
split(invar self:string,sep="")=>list<string>
@[subsubsection]
@[code]
split( invar self: string, sep = "" ) => list<string>
@[code]
将字符串以字符串"sep"分割，并将结果以字符串列表的形式返回。

如果"sep"为空字符串，"self"字符串将按单个UTF-8字符被分割。


例子：
@[code]
S1 = "dao::io::stdio"
L1 = S1.split( "::" )  # { "dao", "io", "stdio" }

S2 = "道语言"
L2 = S2.split()  # { "道", "语", "言" }
@[code]


@[subsubsection]
iterate(invar self:string,unit:enum<byte,char>=$byte)[char:int,index:int]
@[subsubsection]
@[code]
iterate( invar self: string, unit: enum<byte,char> = $byte )[char: int, index: int]
@[code]
历遍字符串里的每个字节或字符单元，并执行附带的代码块。

如果"unit"为"$byte"，按字节历遍；

如果"unit"为"$char"，按UTF-8字符历遍；

每个不构成有效UTF-8编码的字符将被分别历遍。

代码块的第一个参数可以保存字节或字符的整数编码。而第二个参数则表示
它在字符串里的位置。


例子：
@[code]
@[code]





@[subsubsection]
offset(invar self:string,charIndex:int)=>int
@[subsubsection]
@[code]
offset( invar self: string, charIndex: int ) => int
@[code]
获取第"charIndex"个字符的字节位置。



@[subsubsection]
char(invar self:string,charIndex:int)=>string
@[subsubsection]
@[code]
char( invar self: string, charIndex: int ) => string
@[code]
获取第"charIndex"个字符。





@[subsection]
Pattern Matching Methods
@[subsection]

Please see @[node]dao.type.string.pattern@[node] for more information.



@[code]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> string
match( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> tuple<start:int,end:int>|none
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = -1 ) => string
capture( invar self: string, pattern: string, start = 0, end = -1 ) => list<string>
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
scan( invar self: string, pattern: string, start = 0, end = -1 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>
@[code]


@[text]








load help_dao_type_string_pattern;
