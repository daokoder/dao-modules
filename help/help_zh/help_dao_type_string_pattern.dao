load help;


################################################################################
################################################################################
########
######## String Pattern Matching
########
################################################################################
################################################################################

@[name]
dao.type.string.pattern
@[name]

@[title]
字符串模式匹配
@[title]

@[text]

@[subsection]
介绍
@[subsection]

正则表达式是一个用单个字符串表示的句法规则，
用以描述或者匹配符合该规则的所有字符串。
正则表达式主要被用来进行字符串操作，
如在字符串里查找，提取或替换符合某规则的子字符串。


@[subsection]
字符类
@[subsection]

一个字符类表示从属某类的所有字符：
@[list]
--@[green]x@[green] : 普通字符表示它自己，特殊字符@[green]^$()%.[]*+-?{}<>@[green]不在此之列；
--@[green].@[green] : 点表示所有字符；
--@[green]%a@[green] : 所有字母符号；
--@[green]%s@[green] : 所有空白字符；
--@[green]%k@[green] : 所有控制字符；
--@[green]%p@[green] : 所有标点符号；
--@[green]%d@[green] : 所有数字；
--@[green]%x@[green] : 所有十六进制数字；
--@[green]%c@[green] : 所有小写字母；
--@[green]%e@[green] : 所有中日韩文字;
--@[green]%w@[green] : 所有字母，数字加'_'；
--@[green]%A@[green] : 所有非字母字符，@[green]%a@[green]的补集; 
--@[green]%S@[green] : 所有非空白字符，@[green]%s@[green]的补集;
--@[green]%K@[green] : 所有非控制字符，@[green]%k@[green]的补集;
--@[green]%P@[green] : 所有非标点符号字符，@[green]%p@[green]的补集;
--@[green]%D@[green] : 所有非数字，@[green]%d@[green]的补集;
--@[green]%X@[green] : 所有非十六进制数字的字符，@[green]%x@[green]的补集;
--@[green]%C@[green] : 大写字母；
--@[green]%E@[green] : @[green]%e@[green]的补集;
--@[green]%W@[green] : @[green]%w@[green]的补集;
--@[green]%@[green]@[blue]x@[blue] : 表示字符@[blue]x@[blue], 
	这里@[blue]x@[blue]是一非数字，非字母的字符；
	@[blue]x@[blue]也可以是字母字符，如果它不是@[green]b@[green]或者@[green]B@[green]，
	也不表示某个字符类；
--@[green][set]@[green] : 表示@[green]set@[green]中所有字符的并集；
@[green]set@[green]可以以@[green]x-y@[green]的形式包含一从@[green]x@[green]到@[green]y@[green]区间上的所有字符;
上面的字符类也可出现在@[green]set@[green]里；
--@[green][^set]@[green] : @[green][set]@[green]的补集。
@[list]


@[subsection]
模式项
@[subsection]

模式项可以是：
@[list]
-- 单个字符类；
--@[green]^@[green] : 匹配字符串开头；
--@[green]$@[green] : 匹配字符串结尾；
--@[green]%n@[green] : 匹配第@[green]n@[green]个模式组的子字符串；@[green]n@[green]可以是一个或多个数字；
--@[green]%bxy@[green] : 匹配一平衡配对的字符@[green]x@[green]和@[green]y@[green]；
这里平衡表示，从相同的匹配位置开始，被匹配的子字符串必须包含相同且最少数目的
@[green]x@[green]和@[green]y@[green]；
类似于Lua的字符串模式语法；
--@[green]%B{pattern1}{pattern2}@[green] : 匹配一平衡配对的模式@[green]pattern1@[green]和@[green]pattern2@[green];
类似于@[green]%bxy@[green]；
@[list]

@[subsection]模式项重复@[subsection]
模式项@[green]e@[green]可以选择性的被忽略或重复匹配，规则如下：
@[list]
--@[green]e?@[green] : 匹配零次或一次；
--@[green]e*@[green] : 匹配零次或任意次数；
--@[green]e+@[green] : 匹配一次或多次；
--@[green]e{n}@[green] : 匹配@[green]n@[green]次；
--@[green]e{n,}@[green] : 匹配至少@[green]n@[green]次；
--@[green]e{,n}@[green] : 匹配至多@[green]n@[green]次；
--@[green]e{n,m}@[green] : 匹配至少@[green]n@[green]次，且最多@[green]m@[green]次；
@[list]

@[subsection]模式组和扑获@[subsection]

在正则表达式里，可以用括号将一个或多个模式项括起来形成一个子模式，即模式组(group)。
一个模式组里可包含多个可选子模式，以@[green]|@[green]分开。
如果用@[green](|pattern)@[green]或@[green](pattern|)@[green]包含一个空的可选子模式，
那么这个模式组可在字符串匹配过程中被跳过。
如果正则表达式里含有多个模式组，那么按模式组的左括号所出现的顺序，
每个模式组都会自动获得一个标号。例如，在@[green](%a+)%s*(%d+(%a+))@[green]里，
第一个@[green](%a+)@[green]将拥有标号1，@[green](%d+(%a+))@[green]拥有标号2，
而第二个@[green](%a+)@[green]将拥有标号3。
为了方便起见，整个正则表达式所表达的模式也被自动定义为一个模式组，
标号为0。


当一个字符串被匹配到一个正则表达式时，那些与其中的模式组相匹配的
子字符串将被标记（扑获），以便于被引用或提取。
如在进行字符串匹配或替换时，@[green]%n@[green]可被用作表示
第@[green]n@[green]个模式组所匹配的子字符串。


当一个正则表达式可以有多种方式匹配到一个字符串里起始于同一个下标的子字符串时，
匹配长度最长的匹配方式将被选中，并返回相应的结果。
匹配长度将被定义为该表达式里所有模式组所匹配的子字符串的长度的和。
根据这种定义，如果需要给予某个模式组更高的匹配优先权，那么可以
给该模式组增加更多层括号。
例如@[green](%d%w*)(%w*%d)@[green]可以有两种方式匹配到@[green]1a2@[green]，
一种是将@[green]1a@[green]匹配给@[green](%d%w*)@[green]及@[green]2@[green]匹配给@[green](%w*%d)@[green]；
另一种是将@[green]1@[green]匹配给@[green](%d%w*)@[green]及@[green]a2@[green]匹配给@[green](%w*%d)@[green]。
如果在@[green](%w*%d)@[green]外再添加一层括号，即@[green](%d%w*)((%w*%d))@[green]，
那么它与@[green]1a2@[green]的匹配将变得唯一，也就是将@[green]a@[green]匹配到后面的组里。


@[subsection]字符串函数@[subsection]

象Lua里一样，正则表达式的功能需要通过字符串的成员方法使用。
正则表达式需要以字符串的形式作为参数传递给那些方法。
每个正则表达式字符串都在第一次使用时被编译为一内部表达结构，
并与之一一对应。每当正则表达式字符串被使用时，其相应的内部表达结构
将被取用，以避免多次编译正则表达式。
实际上，每个正则表达式字符串在每一个虚拟进程里仅被编译一次。


道字符串类型提供了以下基于模式匹配的方法：
@[code]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> string
match( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> tuple<start:int,end:int>|none
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = -1 ) => string
capture( invar self: string, pattern: string, start = 0, end = -1 ) => list<string>
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
scan( invar self: string, pattern: string, start = 0, end = -1 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>
@[code]


@[subsubsection]
fetch(invar self:string,pattern:string,group=0,start=0,end=-1)=>string
@[subsubsection]
@[code]
fetch( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> string
@[code]
提取字符串中匹配"pattern"模式中第"group"组模式所匹配的子字符串。

只用"start"和"end"之间的字字符串被查找匹配。

负下标从字符串末尾开始算（也即负下标数加字符串长度所表示的下标）。


例子：
@[code]
var S1 = "ABC123DEF456GHI"
var S2 = S1.fetch( "%d+" )          # S2 = "123"
var S3 = S1.fetch( "%d+(%a+)", 1 )  # S3 = "DEF"
var S4 = S1.fetch( "%d+", 0, 6 )    # S4 = "456"
@[code]


@[subsubsection]
match(invar self:string,pattern:string,group=0,start=0,end=-1)=>...
@[subsubsection]
@[code]
match( invar self: string, pattern: string, group = 0, start = 0, end = -1 )
	=> tuple<start:int,end:int>|none
@[code]
查找字符串中"pattern"模式所匹配的子字符串。

如果有匹配，所匹配的子字符串的首字母和末字母的下标将以元组返回。
如果没有匹配，返回空值"none"。

参数"start"和"end"的含义跟@[code]string::fetch()@[code]里的一样。


例子：
@[code]
var S1 = "ABC123DEF(456)GHI"
var M2 = S1.match( "%d+" )          # M2 = (start=3,end=5); substring: "123"
var M3 = S1.match( "%b()" )         # M3 = (start=9,end=13); substring: "(456)"
var M4 = S1.match( "%b{}" )         # M4 = none;
var M5 = S1.match( "%d+(%a+)", 1 )  # M5 = (start=6,end=8); substring: "DEF"
@[code]


@[subsubsection]
change(invar self:string,pat:string,tar:string,index=0,start=0,end=-1)=>string
@[subsubsection]
@[code]
change( invar self: string, pattern: string, target: string, index = 0, 
	start = 0, end = -1 ) => string
@[code]
将字符串里匹配"pattern"模式的子字符串替换为"target"目标字符串。
并将替换后的结果以新的字符串形式返回。

目标字符串"target"里可包含对"pattern"模式里模式组的引用。

如果"index"为零，所有匹配的部分都将被替换，否则仅第"index"个匹配将被替换。

参数"start"和"end"的含义跟@[code]string::fetch()@[code]里的一样。


例子：
@[code]
var S1 = "ABC123DEF456GHI"
var S2 = S.change( "%d+", ";" )          # S2 = "ABC;DEF;GHI"
var S3 = S.change( "(%d+)", "<%1>", 1 )  # S3 = "ABC<123>DEF456GHI"
@[code]


@[subsubsection]
capture(invar self:string,pattern:string,start=0,end=-1)=>list<string>
@[subsubsection]
@[code]
capture( invar self: string, pattern: string, start = 0, end = -1 ) => list<string>
@[code]
提取字符串里跟"pattern"模式及其子模式组匹配的子字符串，并将这些子字符串以
字符串列表的形式返回。这个列表里第i个字符串对应于第i个子模式组。

值得注意的是，子模式组总是从一开始标记，而零保留为代表整个模式。

参数"start"和"end"的含义跟@[code]string::fetch()@[code]里的一样。


例子：
@[code]
var S1 = "ABC123DEF456GHI"
var L1 = S1.capture( "%d+" )        # L1 = { "123" }
var L2 = S1.capture( "%d+ (%a+)" )  # L2 = { "123DEF", "DEF" }
@[code]


@[subsubsection]
extract(invar self:string,pattern:string,mtype:enum<...>=$matched)=>...
@[subsubsection]
@[code]
extract( invar self: string, pattern: string, 
	mtype: enum<both,matched,unmatched> = $matched ) => list<string>
@[code]
提取字符串中匹配，或匹配间，或两者的子字符串，并作字符串列表返回。


例子：
@[code]
var S1 = "ABC123DEF456GHI"
var L1 = S1.extract( "%d+" )   # L1 = { "123", "456" }
var L2 = S2.extract( "%d+", $unmatched )  # L2 = { "ABC", "DEF", "GHI" }
@[code]


@[subsubsection]
scan(invar self:string,pattern:string,start=0,end=-1)[...]=>list<@V>
@[subsubsection]
@[code]
scan( invar self: string, pattern: string, start = 0, end = -1 )
	[start: int, end: int, state: enum<unmatched,matched> => none|@V]
	=> list<@V>
@[code]
用"pattern"模式扫瞄字符串，并为每个匹配的子字符串，和匹配之间的子字符串
调用附加的代码块。

子字符串的开始和结束下标可以作为参数传递个代码块。

参数"start"和"end"的含义跟@[code]string::fetch()@[code]里的一样。


例子：
@[code]
var S1 = "ABC123DEF"
S1.scan( "%d+" ) { [start, end, state]
	io.writeln( start, end, S1[start:end], state )
}
# Output:
# 0 2 ABC $unmatched(0)
# 3 5 123 $matched(1)
# 6 8 DEF $unmatched(0)
@[code]



@[text]
