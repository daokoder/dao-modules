
project = DaoMake::Project( "DaoOS" )

daovm = DaoMake::FindPackage( "Dao", $REQUIRED )

if( daovm == none ) return

project.UseImportLibrary( daovm, "dao" )

dao_os_objs = project.AddObjects( { "dao_system.c" } )
dao_os_dll  = project.AddSharedLibrary( "dao_os", dao_os_objs )
dao_os_lib  = project.AddStaticLibrary( "dao_os", dao_os_objs )

dao_fs_objs = project.AddObjects( { "fs/dao_fs.c" } )
dao_fs_dll  = project.AddSharedLibrary( "dao_fs", dao_fs_objs )
dao_fs_lib  = project.AddStaticLibrary( "dao_fs", dao_fs_objs )

dao_process_objs = project.AddObjects( { "process/dao_process.c" } )
dao_process_dll  = project.AddSharedLibrary( "dao_process", dao_process_objs )
dao_process_lib  = project.AddStaticLibrary( "dao_process", dao_process_objs )

dest = DaoMake::MakePath( project.BinaryPath(), "../../lib/dao/modules/os/" );
src = DaoMake::MakePath( project.SourcePath(), "path.dao" );
cmd = project.AddCommand( "copypath:", "$(DAOMAKE) copy " + src + " " + dest );

dao_os_dll.SetTargetPath( "../../lib/dao/modules" )
dao_os_lib.SetTargetPath( "../../lib/dao/modules" )

dao_fs_dll.SetTargetPath( "../../lib/dao/modules/os" )
dao_fs_lib.SetTargetPath( "../../lib/dao/modules/os" )

dao_process_dll.SetTargetPath( "../../lib/dao/modules/os" )
dao_process_lib.SetTargetPath( "../../lib/dao/modules/os" )

path = DaoMake::MakePath( DaoMake::Variables[ "INSTALL_MOD" ], "os" )

project.GenerateFinder( $TRUE );
project.Install( DaoMake::Variables[ "INSTALL_MOD" ], dao_os_dll );
project.Install( DaoMake::Variables[ "INSTALL_MOD" ], dao_os_lib );
project.Install( path, dao_fs_dll );
project.Install( path, dao_fs_lib );
project.Install( path, dao_process_dll );
project.Install( path, dao_process_lib );
