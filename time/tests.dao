load time
load test import test

@test('Constructing datetime')
routine test1(){
    t = time.make(2015, 8, 5, 10, 30, 24.56)
    assertEqual(t.year, 2015)
    assertEqual(t.month, 8)
    assertEqual(t.day, 5)
    assertEqual(t.hour, 10)
    assertEqual(t.minute, 30)
    assertEqual(t.second, 24.56)

    t = time.make(2015, 8, 5, 12, 15, 0.12345678)
    assertEqual(t.second, 0.123456)

    t = time.make(2015, 8, 5)
    assertEqual(t.hour, 0)
    assertEqual(t.minute, 0)
    assertEqual(t.second, 0.0)
    t = time.make(2015, 4, 12, 23)
    assertEqual(t.minute, 0)
    assertEqual(t.second, 0.0)
    t = time.make(2015, 4, 12, 23, 7)
    assertEqual(t.second, 0.0)

    assertError('Time'){ time.make(-2, 8, 5) }
    assertError('Time'){ time.make(2015, 0, 5) }
    assertError('Time'){ time.make(2015, 13, 5) }
    assertError('Time'){ time.make(2015, 8, 0) }
    assertError('Time'){ time.make(2015, 8, 32) }
    assertError('Time'){ time.make(2015, 2, 30) }
    assertError('Time'){ time.make(2015, 8, 5, -3) }
    assertError('Time'){ time.make(2015, 8, 5, 24) }
    assertError('Time'){ time.make(2015, 8, 5, 10, -234) }
    assertError('Time'){ time.make(2015, 8, 5, 10, 30, -1895.234) }
    assertError('Time'){ time.make(2015, 8, 5, 10, 30, 60.36) }
}

@test('Setting datetime parts')
routine test2(){
    t = time.make(2015, 8, 5)

    t.year = 2016
    assertEqual(t.year, 2016)
    assertError('Param'){ t.year = -1 }
    assertEqual(t.year, 2016)

    t.month = 2
    assertEqual(t.month, 2)
    assertError('Param'){ t.month = -1 }
    assertError('Param'){ t.month = 15 }
    assertEqual(t.month, 2)

    t.day = 29
    assertEqual(t.day, 29)
    assertError('Param'){ t.day = 30 }
    assertError('Param'){ t.day = 0 }
    assertError('Param'){ t.year = 2015 }
    assertEqual(t.day, 29)

    t.hour = 13
    assertEqual(t.hour, 13)
    assertError('Param'){ t.hour = -900 }
    assertError('Param'){ t.hour = 3423 }
    assertEqual(t.hour, 13)

    t.minute = 41
    assertEqual(t.minute, 41)
    assertError('Param'){ t.minute = -1 }
    assertError('Param'){ t.minute = 235 }
    assertEqual(t.minute, 41)

    t.second = 0.0000009
    assertEqual(t.second, 0.0)
    assertError('Param'){ t.second = -0.003 }
    assertError('Param'){ t.second = -346234.098 }
    assertEqual(t.second, 0.0)
}

@test('Datetime parsing (RFC 3339)')
routine test3(){
    t = time.parse('2015-08-05T12:35:00Z')
    assertEqual(t.kind, $utc)
    assertEqual(t.year, 2015)
    assertEqual(t.month, 8)
    assertEqual(t.day, 5)
    assertEqual(t.hour, 12)
    assertEqual(t.minute, 35)
    assertEqual(t.second, 0.0)

    t = time.parse('2015-08-05T12:35:00.1234567Z')
    assertEqual(t.kind, $utc)
    assertEqual(t.hour, 12)
    assertEqual(t.second, 0.123456)

    t = time.parse('1988-10-25T01:37:15+01:00')
    assertEqual(t.kind, $utc)
    assertEqual(t.year, 1988)
    assertEqual(t.month, 10)
    assertEqual(t.day, 25)
    assertEqual(t.hour, 0)
    assertEqual(t.minute, 37)
    assertEqual(t.second, 15.0)

    t = time.parse('1988-10-25T01:37:15.2-01:30')
    assertEqual(t.hour, 3)
    assertEqual(t.minute, 7)
    assertEqual(t.second, 15.2)

    assertError('Time'){ time.parse('15-08-05T12:35:00Z') }
    assertError('Time'){ time.parse('2015-8-05T12:35:00Z') }
    assertError('Time'){ time.parse('2015-13-05T12:35:00Z') }
    assertError('Time'){ time.parse('2015-08-5T12:35:00Z') }
    assertError('Time'){ time.parse('2015-08-35T12:35:00Z') }
    assertError('Time'){ time.parse('2015-08-05t12:35:00Z') }
    assertError('Time'){ time.parse('2015-08-05T1:35:00Z') }
    assertError('Time'){ time.parse('2015-08-05T24:35:00Z') }
    assertError('Time'){ time.parse('2015-08-05T12:3:00Z') }
    assertError('Time'){ time.parse('2015-08-05T12:64:00Z') }
    assertError('Time'){ time.parse('2015-08T12:35:00Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:0Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:234Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:-5.0Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00.0.0Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00z') }
    assertError('Time'){ time.parse('2015-08-05T1a:35:00Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00.xZ') }
    assertError('Time'){ time.parse('201f-08-05T12:35:00Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:001') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-1') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-01') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-01:') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-01:0') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-01Z') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-01:65') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-36:00') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-1:00') }
    assertError('Time'){ time.parse('2015-08-05T12:35:00-01:00Z') }
}

@test('Datetime parsing (simple format)')
routine test4(){
    t = time.parse('2015-08-05 12:35:00')
    assertEqual(t.kind, $local)
    assertEqual(t.year, 2015)
    assertEqual(t.month, 8)
    assertEqual(t.day, 5)
    assertEqual(t.hour, 12)
    assertEqual(t.minute, 35)
    assertEqual(t.second, 0.0)

    t = time.parse('2015-08-05 12:35:00.1234567')
    assertEqual(t.kind, $local)
    assertEqual(t.hour, 12)
    assertEqual(t.second, 0.123456)

    t = time.parse('1988-10-25')
    assertEqual(t.kind, $local)
    assertEqual(t.year, 1988)
    assertEqual(t.month, 10)
    assertEqual(t.day, 25)
    assertEqual(t.hour, 0)
    assertEqual(t.minute, 0)
    assertEqual(t.second, 0.0)

    t = time.parse('1988-10-25')
    assertEqual(t.kind, $local)
    assertEqual(t.year, 1988)
    assertEqual(t.month, 10)
    assertEqual(t.day, 25)
    assertEqual(t.hour, 0)
    assertEqual(t.minute, 0)
    assertEqual(t.second, 0.0)

    t = time.parse('10-25')
    assertEqual(t.kind, $local)
    assertEqual(t.year, time.now().year)
    assertEqual(t.month, 10)
    assertEqual(t.day, 25)
    assertEqual(t.hour, 0)
    assertEqual(t.minute, 0)
    assertEqual(t.second, 0.0)

    t = time.parse('15:45:09')
    now = time.now()
    assertEqual(t.kind, $local)
    assertEqual(t.year, now.year)
    assertEqual(t.month, now.month)
    assertEqual(t.day, now.day)
    assertEqual(t.hour, 15)
    assertEqual(t.minute, 45)
    assertEqual(t.second, 9.0)

    t = time.parse('15:45')
    now = time.now()
    assertEqual(t.kind, $local)
    assertEqual(t.year, now.year)
    assertEqual(t.month, now.month)
    assertEqual(t.day, now.day)
    assertEqual(t.hour, 15)
    assertEqual(t.minute, 45)
    assertEqual(t.second, 0.0)

    assertError('Time'){ time.parse('2015-08 12:35:00') }
    assertError('Time'){ time.parse('15-08-05 12:35:00') }
    assertError('Time'){ time.parse('2015-8-05 12:35:00') }
    assertError('Time'){ time.parse('2015-13-05 12:35:00') }
    assertError('Time'){ time.parse('2015-08-5 12:35:00') }
    assertError('Time'){ time.parse('2015-08-35 12:35:00') }
    assertError('Time'){ time.parse('2015-08-05 1:35:00') }
    assertError('Time'){ time.parse('2015-08-05 24:35:00') }
    assertError('Time'){ time.parse('12:3:00') }
    assertError('Time'){ time.parse('2015-08-35 12:5:00') }
    assertError('Time'){ time.parse('2015-08-05 12:64:00') }
    assertError('Time'){ time.parse('2015-08-35 12:35:0') }
    assertError('Time'){ time.parse('2015-08-35 12:35:324') }
    assertError('Time'){ time.parse('2015-08 12:35:00') }
    assertError('Time'){ time.parse('2015-08-05 12') }
    assertError('Time'){ time.parse('2015') }
    assertError('Time'){ time.parse('12') }
    assertError('Time'){ time.parse('') }
    assertError('Time'){ time.parse('2015-08-05 12:35:00:15') }
    assertError('Time'){ time.parse('2015-08-05-01 12:35:00') }
    assertError('Time'){ time.parse('2015-08-05 12:35:234') }
    assertError('Time'){ time.parse('2015-08-05 12:35:-5.0') }
    assertError('Time'){ time.parse('2015-08-05 12:35:00.0.0') }
    assertError('Time'){ time.parse('2015-08-05 1a:35:00') }
    assertError('Time'){ time.parse('2015-08-05 12:35:00.x') }
    assertError('Time'){ time.parse('201f-08-05 12:35:00') }
    assertError('Time'){ time.parse('2015-08-05 12:35:001') }
}

@test('UTC-local conversions')
routine test5(){
    copy = routine(x: time::DateTime){ x }
    zone = time.zone()

    if (!zone.offset and !zone.dst)
        skipTest('not testable with UTC zone')

    offset = zone.offset + (zone.dst? 3600 : 0)

    utc = time.now($utc)
    loc = copy(utc)
    loc.convert($local)
    assertEqual((float)loc - (float)utc, offset)

    loc = time.now($local)
    utc = copy(loc)
    utc.convert($utc)
    assertEqual((float)loc - (float)utc, offset)
}

routine main(){
    runTests()
}
